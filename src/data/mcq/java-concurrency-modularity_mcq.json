[
  {
    "id": 1,
    "category": "Java",
    "question": "What is the difference between a thread and a process in Java?",
    "code": null,
    "options": [
      "Threads share memory, processes do not",
      "Processes are lightweight, threads are not",
      "Threads run on separate JVMs",
      "No difference"
    ],
    "correctAnswer": "Threads share memory, processes do not",
    "explanation": "Threads within the same process share memory and resources, while processes are independent with separate memory spaces."
  },
  {
    "id": 2,
    "category": "Java",
    "question": "What is the output of the following code using synchronized?",
    "code": "public class Main {\n    synchronized void print() { System.out.println(\"Sync\"); }\n    public static void main(String[] args) throws InterruptedException {\n        Main m = new Main();\n        Thread t1 = new Thread(m::print);\n        Thread t2 = new Thread(m::print);\n        t1.start(); t2.start();\n        t1.join(); t2.join();\n    }\n}",
    "options": [
      "Prints 'Sync' twice",
      "Prints 'Sync' once",
      "Throws an exception",
      "Unpredictable output"
    ],
    "correctAnswer": "Prints 'Sync' twice",
    "explanation": "The synchronized method ensures one thread executes print() at a time, printing 'Sync' twice in a thread-safe manner."
  },
  {
    "id": 3,
    "category": "Java",
    "question": "What is the purpose of a ReentrantLock in Java?",
    "code": null,
    "options": [
      "To replace synchronized blocks with more flexibility",
      "To create virtual threads",
      "To manage memory allocation",
      "To handle exceptions"
    ],
    "correctAnswer": "To replace synchronized blocks with more flexibility",
    "explanation": "ReentrantLock provides advanced locking features like tryLock and fairness, offering more control than synchronized blocks."
  },
  {
    "id": 4,
    "category": "Java",
    "question": "What is the output of the following code using ThreadPoolExecutor?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        executor.submit(() -> System.out.println(\"Task1 \"));\n        executor.submit(() -> System.out.println(\"Task2 \"));\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.SECONDS);\n    }\n}",
    "options": [
      "Prints 'Task1 Task2 ' or 'Task2 Task1 '",
      "Throws an exception",
      "No output",
      "Hangs indefinitely"
    ],
    "correctAnswer": "Prints 'Task1 Task2 ' or 'Task2 Task1 '",
    "explanation": "The ThreadPoolExecutor runs two tasks concurrently, printing 'Task1' and 'Task2' in any order due to thread scheduling."
  },
  {
    "id": 5,
    "category": "Java",
    "question": "What is the purpose of the Java Platform Module System (JPMS)?",
    "code": null,
    "options": [
      "To manage threads",
      "To provide modularity and encapsulation",
      "To optimize garbage collection",
      "To handle I/O operations"
    ],
    "correctAnswer": "To provide modularity and encapsulation",
    "explanation": "JPMS introduces modules to encapsulate code, control dependencies, and improve scalability in Java applications."
  },
  {
    "id": 6,
    "category": "Java",
    "question": "What is the output of the following code using a Phaser?",
    "code": "import java.util.concurrent.Phaser;\npublic class Main {\n    public static void main(String[] args) {\n        Phaser phaser = new Phaser(2);\n        Runnable task = () -> {\n            phaser.arriveAndAwaitAdvance();\n            System.out.print(\"Phase1 \");\n        };\n        new Thread(task).start();\n        new Thread(task).start();\n    }\n}",
    "options": [
      "Prints 'Phase1 Phase1 '",
      "Hangs indefinitely",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints 'Phase1 Phase1 '",
    "explanation": "The Phaser synchronizes two threads, which print 'Phase1' after both arrive at the advance point."
  },
  {
    "id":  7,
    "category": "Java",
    "question": "What is the role of the synchronized keyword in Java?",
    "code": null,
    "options": [
      "To create virtual threads",
      "To ensure thread-safe access",
      "To optimize memory usage",
      "To handle exceptions"
    ],
    "correctAnswer": "To ensure thread-safe access",
    "explanation": "The synchronized keyword ensures that only one thread can execute a method or block at a time, preventing data corruption."
  },
  {
    "id": 8,
    "category": "Java",
    "question": "What is the output of the following code using ConcurrentHashMap?",
    "code": "import java.util.concurrent.ConcurrentHashMap;\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n        map.put(\"Key\", 1);\n        map.computeIfPresent(\"Key\", (k, v) -> v + 1);\n        System.out.println(map.get(\"Key\"));\n    }\n}",
    "options": [
      "Prints '1'",
      "Prints '2'",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints '2'",
    "explanation": "computeIfPresent updates the value for 'Key' by incrementing it from 1 to 2 in a thread-safe manner."
  },
  {
    "id": 9,
    "category": "Java",
    "question": "How do you define a module in Java using JPMS?",
    "code": null,
    "options": [
      "Using module-info.java",
      "Using package-info.java",
      "Using a manifest file",
      "Using annotations"
    ],
    "correctAnswer": "Using module-info.java",
    "explanation": "JPMS uses module-info.java to define a module, specifying its name, dependencies, and exported packages."
  },
  {
    "id": 10,
    "category": "Java",
    "question": "What is the output of the following code using a virtual thread?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\n        Future<Integer> future = executor.submit(() -> 42);\n        System.out.println(future.get());\n        executor.shutdown();\n    }\n}",
    "options": [
      "Prints '42'",
      "Throws an exception",
      "Hangs indefinitely",
      "No output"
    ],
    "correctAnswer": "Prints '42'",
    "explanation": "The virtual thread executes the task, returning 42 via the Future."
  },
  {
    "id": 11,
    "category": "Java",
    "question": "What is the output of the following code using Thread.sleep?",
    "code": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        System.out.print(\"Start \");\n        Thread.sleep(1000);\n        System.out.print(\"End\");\n    }\n}",
    "options": [
      "Prints 'Start End' after 1 second",
      "Prints 'Start End' immediately",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints 'Start End' after 1 second",
    "explanation": "Thread.sleep(1000) pauses the main thread for 1 second, printing 'Start' then 'End' after the delay."
  },
  {
    "id": 12,
    "category": "Java",
    "question": "What is the purpose of the volatile keyword in Java?",
    "code": null,
    "options": [
      "Ensures atomic operations",
      "Guarantees visibility across threads",
      "Creates virtual threads",
      "Manages thread priorities"
    ],
    "correctAnswer": "Guarantees visibility across threads",
    "explanation": "The volatile keyword ensures that a variableâ€™s value is read from and written to main memory, making changes visible to all threads."
  },
  {
    "id": 13,
    "category": "Java",
    "question": "What is the output of the following code using a CountDownLatch?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        CountDownLatch latch = new CountDownLatch(2);\n        Runnable task = () -> { System.out.print(\"Task \"); latch.countDown(); };\n        new Thread(task).start();\n        new Thread(task).start();\n        latch.await();\n        System.out.print(\"Done\");\n    }\n}",
    "options": [
      "Prints 'Task Task Done'",
      "Hangs indefinitely",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints 'Task Task Done'",
    "explanation": "The CountDownLatch waits for two threads to count down, printing 'Task' twice, then 'Done' after both complete."
  },
  {
    "id": 14,
    "category": "Java",
    "question": "What is the output of the following code using a synchronized block?",
    "code": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Object lock = new Object();\n        Thread t1 = new Thread(() -> { synchronized(lock) { System.out.print(\"T1 \"); } });\n        Thread t2 = new Thread(() -> { synchronized(lock) { System.out.print(\"T2 \"); } });\n        t1.start(); t2.start(); t1.join(); t2.join();\n    }\n}",
    "options": [
      "Prints 'T1 T2 ' or 'T2 T1 '",
      "Prints 'T1 T2 ' only",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints 'T1 T2 ' or 'T2 T1 '",
    "explanation": "The synchronized block ensures one thread executes at a time, but the order of T1 and T2 depends on thread scheduling."
  },
  {
    "id": 15,
    "category": "Java",
    "question": "What is the purpose of the exports keyword in a module-info.java file?",
    "code": null,
    "options": [
      "Declares module dependencies",
      "Specifies packages accessible to other modules",
      "Defines module name",
      "Enables thread synchronization"
    ],
    "correctAnswer": "Specifies packages accessible to other modules",
    "explanation": "The exports keyword in module-info.java makes specified packages accessible to other modules, enforcing encapsulation."
  },
  {
    "id": 16,
    "category": "Java",
    "question": "What is the output of the following code using CyclicBarrier?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) {\n        CyclicBarrier barrier = new CyclicBarrier(2, () -> System.out.print(\"Barrier \"));\n        Runnable task = () -> { try { barrier.await(); System.out.print(\"Task \"); } catch (Exception e) {} };\n        new Thread(task).start();\n        new Thread(task).start();\n    }\n}",
    "options": [
      "Prints 'Barrier Task Task '",
      "Hangs indefinitely",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints 'Barrier Task Task '",
    "explanation": "The CyclicBarrier waits for two threads, runs the barrier action ('Barrier'), then both threads print 'Task'."
  },
  {
    "id": 17,
    "category": "Java",
    "question": "What is the difference between Thread.start() and Thread.run()?",
    "code": null,
    "options": [
      "start() creates a new thread, run() does not",
      "run() creates a new thread, start() does not",
      "start() is synchronized, run() is not",
      "No difference"
    ],
    "correctAnswer": "start() creates a new thread, run() does not",
    "explanation": "start() creates a new thread and invokes run(), while calling run() directly executes it in the current thread."
  },
  {
    "id": 18,
    "category": "Java",
    "question": "What is the output of the following code using AtomicInteger?",
    "code": "import java.util.concurrent.atomic.*;\npublic class Main {\n    public static void main(String[] args) {\n        AtomicInteger ai = new AtomicInteger(5);\n        ai.incrementAndGet();\n        System.out.println(ai.get());\n    }\n}",
    "options": [
      "Prints '5'",
      "Prints '6'",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints '6'",
    "explanation": "incrementAndGet() atomically increments the AtomicInteger from 5 to 6 and returns the new value."
  },
  {
    "id": 19,
    "category": "Java",
    "question": "What is the output of the following code using a JPMS module?",
    "code": "// module-info.java\nmodule my.module {\n    exports com.example;\n}\n// com/example/MyClass.java\npackage com.example;\npublic class MyClass {\n    public static void main(String[] args) {\n        System.out.println(\"Module\");\n    }\n}",
    "options": [
      "Prints 'Module'",
      "Throws an exception",
      "No output",
      "Compilation error"
    ],
    "correctAnswer": "Prints 'Module'",
    "explanation": "The module exports the com.example package, and MyClass is accessible, printing 'Module' when run."
  },
  {
    "id": 20,
    "category": "Java",
    "question": "What is the output of the following code using a virtual thread with sleep?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\n        executor.submit(() -> { try { Thread.sleep(100); System.out.print(\"Done \"); } catch (Exception e) {} });\n        executor.shutdown();\n        executor.awaitTermination(1, TimeUnit.SECONDS);\n    }\n}",
    "options": [
      "Prints 'Done '",
      "Throws an exception",
      "No output",
      "Hangs indefinitely"
    ],
    "correctAnswer": "Prints 'Done '",
    "explanation": "The virtual thread sleeps for 100ms, prints 'Done', and the executor terminates within the 1-second timeout."
  },
  {
    "id": 21,
    "category": "Java",
    "question": "What is the purpose of the wait() and notify() methods in Java?",
    "code": null,
    "options": [
      "To manage thread priorities",
      "To synchronize thread communication",
      "To create virtual threads",
      "To handle exceptions"
    ],
    "correctAnswer": "To synchronize thread communication",
    "explanation": "wait() causes a thread to wait until notify() or notifyAll() is called, enabling inter-thread communication."
  },
  {
    "id": 22,
    "category": "Java",
    "question": "What is the output of the following code using a Semaphore?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Semaphore semaphore = new Semaphore(1);\n        Runnable task = () -> { try { semaphore.acquire(); System.out.print(\"Task \"); semaphore.release(); } catch (Exception e) {} };\n        new Thread(task).start();\n        new Thread(task).start();\n        Thread.sleep(100);\n    }\n}",
    "options": [
      "Prints 'Task Task '",
      "Hangs indefinitely",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints 'Task Task '",
    "explanation": "The Semaphore allows one thread at a time to execute, printing 'Task' twice as each thread acquires and releases the permit."
  },
  {
    "id": 23,
    "category": "Java",
    "question": "What is the requires directive in a module-info.java file used for?",
    "code": null,
    "options": [
      "Exports packages",
      "Declares module dependencies",
      "Defines module services",
      "Synchronizes modules"
    ],
    "correctAnswer": "Declares module dependencies",
    "explanation": "The requires directive specifies other modules that the current module depends on."
  },
  {
    "id": 24,
    "category": "Java",
    "question": "What is the output of the following code using a ThreadLocal variable?",
    "code": "public class Main {\n    static ThreadLocal<Integer> tl = ThreadLocal.withInitial(() -> 0);\n    public static void main(String[] args) throws Exception {\n        Runnable task = () -> { tl.set(tl.get() + 1); System.out.print(tl.get() + \" \"); };\n        Thread t1 = new Thread(task); Thread t2 = new Thread(task);\n        t1.start(); t2.start(); t1.join(); t2.join();\n    }\n}",
    "options": [
      "Prints '1 1 '",
      "Prints '1 2 '",
      "Throws an exception",
      "Unpredictable output"
    ],
    "correctAnswer": "Prints '1 1 '",
    "explanation": "ThreadLocal provides each thread with its own copy of the variable, so each thread increments from 0 to 1, printing '1 1'."
  },
  {
    "id": 25,
    "category": "Java",
    "question": "What is the output of the following code using a ReentrantLock with tryLock?",
    "code": "import java.util.concurrent.locks.*;\npublic class Main {\n    public static void main(String[] args) {\n        ReentrantLock lock = new ReentrantLock();\n        if (lock.tryLock()) {\n            System.out.print(\"Locked \");\n            lock.unlock();\n        } else {\n            System.out.print(\"NotLocked \");\n        }\n    }\n}",
    "options": [
      "Prints 'Locked '",
      "Prints 'NotLocked '",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints 'Locked '",
    "explanation": "tryLock() attempts to acquire the lock immediately, succeeds since no other thread holds it, and prints 'Locked'."
  },
  {
    "id": 26,
    "category": "Java",
    "question": "What is the difference between a daemon thread and a user thread in Java?",
    "code": null,
    "options": [
      "Daemon threads terminate when JVM exits, user threads do not",
      "User threads have higher priority",
      "Daemon threads are synchronized",
      "No difference"
    ],
    "correctAnswer": "Daemon threads terminate when JVM exits, user threads do not",
    "explanation": "Daemon threads run in the background and terminate when the JVM exits, while user threads keep the JVM running until they complete."
  },
  {
    "id": 27,
    "category": "Java",
    "question": "What is the output of the following code using a ConcurrentLinkedQueue?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();\n        queue.offer(1); queue.offer(2);\n        System.out.println(queue.poll());\n    }\n}",
    "options": [
      "Prints '1'",
      "Prints '2'",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints '1'",
    "explanation": "ConcurrentLinkedQueue is FIFO; poll() removes and returns the head (1) after adding 1 and 2."
  },
  {
    "id": 28,
    "category": "Java",
    "question": "What is the output of the following code using a JPMS module with requires?",
    "code": "// module-info.java\nmodule app {\n    requires java.base;\n    exports com.app;\n}\n// com/app/App.java\npackage com.app;\npublic class App {\n    public static void main(String[] args) {\n        System.out.println(\"Running\");\n    }\n}",
    "options": [
      "Prints 'Running'",
      "Throws an exception",
      "Compilation error",
      "No output"
    ],
    "correctAnswer": "Prints 'Running'",
    "explanation": "The module declares a dependency on java.base and exports com.app, allowing App to run and print 'Running'."
  },
  {
    "id": 29,
    "category": "Java",
    "question": "What is the output of the following code using a ForkJoinPool?",
    "code": "import java.util.concurrent.*;\npublic class Main extends RecursiveTask<Integer> {\n    protected Integer compute() { return 42; }\n    public static void main(String[] args) {\n        ForkJoinPool pool = new ForkJoinPool();\n        System.out.println(pool.invoke(new Main()));\n    }\n}",
    "options": [
      "Prints '42'",
      "Throws an exception",
      "No output",
      "Hangs indefinitely"
    ],
    "correctAnswer": "Prints '42'",
    "explanation": "The ForkJoinPool executes the RecursiveTask, which returns 42 via compute(), printed by invoke()."
  },
  {
    "id": 30,
    "category": "Java",
    "question": "What is the purpose of the interrupt() method in Java threads?",
    "code": null,
    "options": [
      "Terminates a thread immediately",
      "Sets the interrupted status of a thread",
      "Pauses a thread",
      "Synchronizes threads"
    ],
    "correctAnswer": "Sets the interrupted status of a thread",
    "explanation": "interrupt() sets a threadâ€™s interrupted flag, which the thread can check to handle interruption gracefully."
  },
  {
    "id": 31,
    "category": "Java",
    "question": "What is the output of the following code using a BlockingQueue?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);\n        queue.put(1);\n        System.out.println(queue.take());\n    }\n}",
    "options": [
      "Prints '1'",
      "Throws an exception",
      "Hangs indefinitely",
      "No output"
    ],
    "correctAnswer": "Prints '1'",
    "explanation": "put(1) adds 1 to the queue, and take() removes and returns it, printing '1'."
  },
  {
    "id": 32,
    "category": "Java",
    "question": "What is the uses directive in a module-info.java file used for?",
    "code": null,
    "options": [
      "Declares service dependencies",
      "Exports packages",
      "Defines module name",
      "Synchronizes modules"
    ],
    "correctAnswer": "Declares service dependencies",
    "explanation": "The uses directive specifies a service interface that the module consumes via ServiceLoader."
  },
  {
    "id": 33,
    "category": "Java",
    "question": "What is the output of the following code using a synchronized static method?",
    "code": "public class Main {\n    static synchronized void print() { System.out.print(\"Sync \"); }\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(Main::print);\n        Thread t2 = new Thread(Main::print);\n        t1.start(); t2.start(); t1.join(); t2.join();\n    }\n}",
    "options": [
      "Prints 'Sync Sync '",
      "Prints 'Sync' once",
      "Throws an exception",
      "Unpredictable output"
    ],
    "correctAnswer": "Prints 'Sync Sync '",
    "explanation": "The static synchronized method locks on the Main.class object, ensuring sequential execution, printing 'Sync' twice."
  },
  {
    "id": 34,
    "category": "Java",
    "question": "What is the output of the following code using a CopyOnWriteArrayList?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) {\n        CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();\n        list.add(1); list.add(2);\n        for (Integer i : list) { list.add(3); }\n        System.out.println(list.size());\n    }\n}",
    "options": [
      "Prints '2'",
      "Prints '4'",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints '2'",
    "explanation": "CopyOnWriteArrayList creates a new copy on modification, so the iterator sees the original list (size 2), and additions donâ€™t affect the iteration."
  },
  {
    "id": 35,
    "category": "Java",
    "question": "What is the output of the following code using a virtual thread with interruption?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\n        Thread t = Thread.ofVirtual().start(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { System.out.print(\"Interrupted \"); } });\n        t.interrupt();\n        t.join();\n    }\n}",
    "options": [
      "Prints 'Interrupted '",
      "Throws an exception",
      "No output",
      "Hangs indefinitely"
    ],
    "correctAnswer": "Prints 'Interrupted '",
    "explanation": "The virtual thread is interrupted, catching InterruptedException and printing 'Interrupted'."
  },
  {
    "id": 36,
    "category": "Java",
    "question": "What is the purpose of the ExecutorService in Java?",
    "code": null,
    "options": [
      "Manages thread pools",
      "Synchronizes threads",
      "Creates daemon threads",
      "Handles exceptions"
    ],
    "correctAnswer": "Manages thread pools",
    "explanation": "ExecutorService manages a pool of threads, executing tasks efficiently and controlling their lifecycle."
  },
  {
    "id": 37,
    "category": "Java",
    "question": "What is the output of the following code using a Condition with ReentrantLock?",
    "code": "import java.util.concurrent.locks.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ReentrantLock lock = new ReentrantLock();\n        Condition condition = lock.newCondition();\n        lock.lock();\n        try { condition.signal(); System.out.print(\"Signaled \"); } finally { lock.unlock(); }\n    }\n}",
    "options": [
      "Prints 'Signaled '",
      "Throws an exception",
      "No output",
      "Hangs indefinitely"
    ],
    "correctAnswer": "Prints 'Signaled '",
    "explanation": "The signal() method has no effect since no thread is waiting, and the program prints 'Signaled'."
  },
  {
    "id": 38,
    "category": "Java",
    "question": "What is the provides directive in a module-info.java file used for?",
    "code": null,
    "options": [
      "Declares service implementations",
      "Exports packages",
      "Defines module dependencies",
      "Synchronizes modules"
    ],
    "correctAnswer": "Declares service implementations",
    "explanation": "The provides directive specifies a service implementation that the module offers via ServiceLoader."
  },
  {
    "id": 39,
    "category": "Java",
    "question": "What is the output of the following code using a ScheduledExecutorService?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.schedule(() -> System.out.print(\"Task \"), 100, TimeUnit.MILLISECONDS);\n        scheduler.shutdown();\n        scheduler.awaitTermination(1, TimeUnit.SECONDS);\n    }\n}",
    "options": [
      "Prints 'Task '",
      "Throws an exception",
      "No output",
      "Hangs indefinitely"
    ],
    "correctAnswer": "Prints 'Task '",
    "explanation": "The task is scheduled to run after 100ms, prints 'Task', and the scheduler terminates within the 1-second timeout."
  },
  {
    "id": 40,
    "category": "Java",
    "question": "What is the difference between Lock and synchronized in Java?",
    "code": null,
    "options": [
      "Lock provides more flexibility, synchronized is simpler",
      "Synchronized supports tryLock, Lock does not",
      "Lock is implicit, synchronized is explicit",
      "No difference"
    ],
    "correctAnswer": "Lock provides more flexibility, synchronized is simpler",
    "explanation": "Lock (e.g., ReentrantLock) offers features like tryLock and fairness, while synchronized is simpler but less flexible."
  },
  {
    "id": 41,
    "category": "Java",
    "question": "What is the output of the following code using a ConcurrentSkipListSet?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentSkipListSet<Integer> set = new ConcurrentSkipListSet<>();\n        set.add(2); set.add(1); set.add(3);\n        System.out.println(set.first());\n    }\n}",
    "options": [
      "Prints '1'",
      "Prints '2'",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints '1'",
    "explanation": "ConcurrentSkipListSet maintains sorted order; first() returns the smallest element, 1."
  },
  {
    "id": 42,
    "category": "Java",
    "question": "What is the output of the following code using a JPMS module with restricted access?",
    "code": "// module-info.java\nmodule my.module {\n    // no exports\n}\n// com/example/MyClass.java\npackage com.example;\npublic class MyClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hidden\");\n    }\n}",
    "options": [
      "Prints 'Hidden'",
      "Throws an exception",
      "Compilation error",
      "No output"
    ],
    "correctAnswer": "Prints 'Hidden'",
    "explanation": "The module does not export com.example, but the main class can still run within the same module, printing 'Hidden'."
  },
  {
    "id": 43,
    "category": "Java",
    "question": "What is the output of the following code using a Thread join?",
    "code": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> System.out.print(\"Child \"));\n        t.start();\n        t.join();\n        System.out.print(\"Main\");\n    }\n}",
    "options": [
      "Prints 'Child Main'",
      "Prints 'Main Child'",
      "Throws an exception",
      "Unpredictable output"
    ],
    "correctAnswer": "Prints 'Child Main'",
    "explanation": "join() ensures the main thread waits for the child thread to complete, printing 'Child' then 'Main'."
  },
  {
    "id": 44,
    "category": "Java",
    "question": "What is the output of the following code using an Exchanger?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) {\n        Exchanger<String> exchanger = new Exchanger<>();\n        new Thread(() -> { try { System.out.print(exchanger.exchange(\"T1 \")); } catch (Exception e) {} }).start();\n        new Thread(() -> { try { System.out.print(exchanger.exchange(\"T2 \")); } catch (Exception e) {} }).start();\n    }\n}",
    "options": [
      "Prints 'T2 T1 ' or 'T1 T2 '",
      "Throws an exception",
      "No output",
      "Hangs indefinitely"
    ],
    "correctAnswer": "Prints 'T2 T1 ' or 'T1 T2 '",
    "explanation": "Exchanger swaps data between threads; one thread receives 'T1', the other 'T2', printed in any order."
  },
  {
    "id": 45,
    "category": "Java",
    "question": "What is the purpose of the open keyword in a module-info.java file?",
    "code": null,
    "options": [
      "Allows reflective access to all packages",
      "Exports all packages",
      "Declares module dependencies",
      "Defines module services"
    ],
    "correctAnswer": "Allows reflective access to all packages",
    "explanation": "The open keyword makes all packages in a module accessible via reflection, bypassing encapsulation."
  },
  {
    "id": 46,
    "category": "Java",
    "question": "What is the output of the following code using a virtual thread with a Callable?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\n        Callable<String> task = () -> \"Result\";\n        Future<String> future = executor.submit(task);\n        System.out.println(future.get());\n        executor.shutdown();\n    }\n}",
    "options": [
      "Prints 'Result'",
      "Throws an exception",
      "No output",
      "Hangs indefinitely"
    ],
    "correctAnswer": "Prints 'Result'",
    "explanation": "The virtual thread executes the Callable, returning 'Result' via the Future."
  },
  {
    "id": 47,
    "category": "Java",
    "question": "What is the output of the following code using a ConcurrentLinkedDeque?",
    "code": "import java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentLinkedDeque<Integer> deque = new ConcurrentLinkedDeque<>();\n        deque.addFirst(1); deque.addLast(2);\n        System.out.println(deque.pollFirst());\n    }\n}",
    "options": [
      "Prints '1'",
      "Prints '2'",
      "Throws an exception",
      "No output"
    ],
    "correctAnswer": "Prints '1'",
    "explanation": "ConcurrentLinkedDeque supports FIFO/LIFO; pollFirst() removes and returns the first element (1)."
  },
  {
    "id": 48,
    "category": "Java",
    "question": "What is the output of the following code using a JPMS service?",
    "code": "// module-info.java\nmodule consumer {\n    uses com.example.Service;\n}\n// com/example/Service.java\npackage com.example;\npublic interface Service { String exec(); }\n// Consumer.java\npublic class Main {\n    public static void main(String[] args) { System.out.println(\"No service\"); }\n}",
    "options": [
      "Prints 'No service'",
      "Throws an exception",
      "Compilation error",
      "No output"
    ],
    "correctAnswer": "Prints 'No service'",
    "explanation": "The module uses a service interface, but without a provider, the main class runs normally, printing 'No service'."
  },
  {
    "id": 49,
    "category": "Java",
    "question": "What is the output of the following code using a thread priority?",
    "code": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> System.out.print(\"Low \"));\n        t.setPriority(Thread.MIN_PRIORITY);\n        t.start();\n        t.join();\n        System.out.print(\"High\");\n    }\n}",
    "options": [
      "Prints 'Low High'",
      "Prints 'High Low'",
      "Throws an exception",
      "Unpredictable output"
    ],
    "correctAnswer": "Prints 'Low High'",
    "explanation": "The low-priority thread runs, prints 'Low', and join() waits for it to complete before printing 'High'."
  },
  {
    "id": 50,
    "category": "Java",
    "question": "What is the purpose of the CompletableFuture in Java?",
    "code": null,
    "options": [
      "Manages asynchronous computations",
      "Synchronizes threads",
      "Creates thread pools",
      "Handles module dependencies"
    ],
    "correctAnswer": "Manages asynchronous computations",
    "explanation": "CompletableFuture enables asynchronous programming, allowing tasks to run concurrently and handle results or exceptions."
  }
]