[
    {
      "id": 1,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom allocator?",
      "code": "```cpp\n#include <vector>\n#include <iostream>\nint main() {\n    std::allocator<int> alloc;\n    int* p = alloc.allocate(3);\n    p[0] = 1; p[1] = 2; p[2] = 3;\n    std::cout << p[1] << std::endl;\n    alloc.deallocate(p, 3);\n    return 0;\n}\n```",
      "options": [
        "2",
        "Throws an exception",
        "Undefined behavior",
        "0"
      ],
      "correctAnswer": "2",
      "explanation": "The allocator allocates memory for three integers, which are assigned and accessed, printing 2."
    },
    {
      "id": 2,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom move constructor?",
      "code": "```cpp\n#include <iostream>\nclass MyClass {\n    int* data;\npublic:\n    MyClass(int x) : data(new int(x)) {}\n    MyClass(MyClass&& other) noexcept : data(other.data) { other.data = nullptr; }\n    ~MyClass() { delete data; }\n    int get() const { return *data; }\n};\nint main() {\n    MyClass a(42);\n    MyClass b = std::move(a);\n    std::cout << b.get() << std::endl;\n    return 0;\n}\n```",
      "options": [
        "42",
        "Throws an exception",
        "0",
        "Undefined behavior"
      ],
      "correctAnswer": "42",
      "explanation": "The move constructor transfers ownership of the data, so b.get() returns 42."
    },
    {
      "id": 3,
      "category": "C++",
      "question": "What happens in the following C++ code using a custom std::optional?",
      "code": "```cpp\n#include <optional>\n#include <iostream>\nint main() {\n    std::optional<int> opt = 42;\n    opt = std::nullopt;\n    std::cout << (opt.has_value() ? *opt : -1) << std::endl;\n    return 0;\n}\n```",
      "options": [
        "-1",
        "42",
        "Throws an exception",
        "Undefined behavior"
      ],
      "correctAnswer": "-1",
      "explanation": "Setting opt to nullopt clears the value, so has_value() is false, printing -1."
    },
    {
      "id": 4,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom lambda with capture by move?",
      "code": "```cpp\n#include <iostream>\n#include <memory>\nint main() {\n    auto ptr = std::make_unique<int>(42);\n    auto lambda = [p = std::move(ptr)]() { return *p; };\n    std::cout << lambda() << std::endl;\n    return 0;\n}\n```",
      "options": [
        "42",
        "Throws an exception",
        "0",
        "Undefined behavior"
      ],
      "correctAnswer": "42",
      "explanation": "The lambda captures the unique_ptr by move, allowing it to access the value 42."
    },
    {
      "id": 5,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom constexpr function?",
      "code": "```cpp\n#include <iostream>\nconstexpr int factorial(int n) {\n    return n <= 1 ? 1 : n * factorial(n - 1);\n}\nint main() {\n    constexpr int result = factorial(5);\n    std::cout << result << std::endl;\n    return 0;\n}\n```",
      "options": [
        "120",
        "24",
        "Throws an exception",
        "0"
      ],
      "correctAnswer": "120",
      "explanation": "The constexpr function computes 5! = 120 at compile time."
    },
    {
      "id": 6,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom std::variant?",
      "code": "```cpp\n#include <variant>\n#include <iostream>\nint main() {\n    std::variant<int, std::string> v = 42;\n    std::cout << std::get<int>(v) << std::endl;\n    return 0;\n}\n```",
      "options": [
        "42",
        "Throws an exception",
        "0",
        "Undefined behavior"
      ],
      "correctAnswer": "42",
      "explanation": "The variant holds an int (42), which is retrieved and printed using std::get."
    },
    {
      "id": 7,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom std::jthread?",
      "code": "```cpp\n#include <thread>\n#include <iostream>\nint main() {\n    int x = 0;\n    {\n        std::jthread t([&x]() { x = 42; });\n    }\n    std::cout << x << std::endl;\n    return 0;\n}\n```",
      "options": [
        "42",
        "0",
        "Throws an exception",
        "Undefined behavior"
      ],
      "correctAnswer": "42",
      "explanation": "The jthread automatically joins on destruction, ensuring x is updated to 42 before printing."
    },
    {
      "id": 8,
      "category": "C++",
      "question": "What happens in the following C++ code using a custom template with SFINAE?",
      "code": "```cpp\n#include <iostream>\n#include <type_traits>\ntemplate<typename T, typename = std::enable_if_t<std::is_integral_v<T>>>\nvoid print(T x) { std::cout << x << std::endl; }\nint main() {\n    print(42);\n    return 0;\n}\n```",
      "options": [
        "Prints '42'",
        "Throws a compilation error",
        "Prints nothing",
        "Undefined behavior"
      ],
      "correctAnswer": "Prints '42'",
      "explanation": "SFINAE enables the function for integral types, so print(42) succeeds."
    },
    {
      "id": 9,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom std::shared_ptr with aliasing?",
      "code": "```cpp\n#include <memory>\n#include <iostream>\nstruct Data { int x; };\nint main() {\n    auto sp = std::make_shared<Data>(Data{42});\n    std::shared_ptr<int> alias(sp, &sp->x);\n    std::cout << *alias << std::endl;\n    return 0;\n}\n```",
      "options": [
        "42",
        "Throws an exception",
        "0",
        "Undefined behavior"
      ],
      "correctAnswer": "42",
      "explanation": "The aliasing constructor creates a shared_ptr to x, which points to 42."
    },
    {
      "id": 10,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom CRTP pattern?",
      "code": "```cpp\n#include <iostream>\ntemplate<typename Derived>\nstruct Base {\n    void print() { static_cast<Derived*>(this)->impl(); }\n};\nstruct Derived : Base<Derived> {\n    void impl() { std::cout << \"Derived\" << std::endl; }\n};\nint main() {\n    Derived d;\n    d.print();\n    return 0;\n}\n```",
      "options": [
        "Derived",
        "Throws an exception",
        "Prints nothing",
        "Undefined behavior"
      ],
      "correctAnswer": "Derived",
      "explanation": "CRTP allows the base class to call the derived classâ€™s impl, printing 'Derived'."
    },
    {
      "id": 11,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom std::filesystem operation?",
      "code": "```cpp\n#include <filesystem>\n#include <iostream>\nint main() {\n    std::filesystem::path p = \"test.txt\";\n    std::cout << p.extension() << std::endl;\n    return 0;\n}\n```",
      "options": [
        ".txt",
        "test.txt",
        "Throws an exception",
        "Empty string"
      ],
      "correctAnswer": ".txt",
      "explanation": "The extension() method returns the file extension, including the dot."
    },
    {
      "id": 12,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom std::chrono duration?",
      "code": "```cpp\n#include <chrono>\n#include <iostream>\nint main() {\n    auto duration = std::chrono::milliseconds(1500);\n    auto seconds = std::chrono::duration_cast<std::chrono::seconds>(duration);\n    std::cout << seconds.count() << std::endl;\n    return 0;\n}\n```",
      "options": [
        "1",
        "1500",
        "Throws an exception",
        "0"
      ],
      "correctAnswer": "1",
      "explanation": "Casting 1500ms to seconds truncates to 1 second."
    },
    {
      "id": 13,
      "category": "C++",
      "question": "What happens in the following C++ code using a custom std::ranges transform?",
      "code": "```cpp\n#include <ranges>\n#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    auto result = v | std::ranges::views::transform([](int x) { return x * 2; });\n    std::cout << result[0] << std::endl;\n    return 0;\n}\n```",
      "options": [
        "2",
        "1",
        "Throws an exception",
        "Undefined behavior"
      ],
      "correctAnswer": "2",
      "explanation": "The transform view doubles each element, so result[0] is 1 * 2 = 2."
    },
    {
      "id": 14,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom std::atomic operation?",
      "code": "```cpp\n#include <atomic>\n#include <iostream>\nint main() {\n    std::atomic<int> x(42);\n    int expected = 42;\n    x.compare_exchange_strong(expected, 100);\n    std::cout << x.load() << std::endl;\n    return 0;\n}\n```",
      "options": [
        "100",
        "42",
        "Throws an exception",
        "Undefined behavior"
      ],
      "correctAnswer": "100",
      "explanation": "The compare_exchange_strong succeeds, updating x to 100."
    },
    {
      "id": 15,
      "category": "C++",
      "question": "What is the output of the following C++ code using a custom concept?",
      "code": "```cpp\n#include <concepts>\n#include <iostream>\ntemplate<typename T>\nconcept Integral = std::is_integral_v<T>;\ntemplate<Integral T>\nvoid print(T x) { std::cout << x << std::endl; }\nint main() {\n    print(42);\n    return 0;\n}\n```",
      "options": [
        "42",
        "Throws a compilation error",
        "Prints nothing",
        "Undefined behavior"
      ],
      "correctAnswer": "42",
      "explanation": "The concept ensures T is integral, so print(42) succeeds."
    }
  ]