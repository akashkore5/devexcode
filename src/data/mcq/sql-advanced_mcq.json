[
    {
      "id": 1,
      "category": "SQL",
      "question": "What is the output of the following SQL query using a recursive CTE to generate a Fibonacci sequence?",
      "code": "```sql\nWITH RECURSIVE Fib(n, a, b) AS (\n    SELECT 1, 0, 1\n    UNION ALL\n    SELECT n + 1, b, a + b FROM Fib WHERE n < 5\n)\nSELECT b FROM Fib WHERE n = 5;\n```",
      "options": [
        "3",
        "5",
        "Throws an error",
        "8"
      ],
      "correctAnswer": "5",
      "explanation": "The CTE generates Fibonacci numbers: (0, 1), (1, 1), (1, 2), (2, 3), (3, 5). For n=5, b=5."
    },
    {
      "id": 2,
      "category": "SQL",
      "question": "What does the following SQL query return when using a window function with NTILE?",
      "code": "```sql\nCREATE TABLE Scores (id INT, score INT);\nINSERT INTO Scores VALUES (1, 90), (2, 85), (3, 95), (4, 80);\nSELECT id, score, NTILE(2) OVER (ORDER BY score DESC) AS bucket\nFROM Scores\nORDER BY id;\n```",
      "options": [
        "(1, 90, 1), (2, 85, 2), (3, 95, 1), (4, 80, 2)",
        "(1, 90, 2), (2, 85, 1), (3, 95, 1), (4, 80, 2)",
        "Throws an error",
        "(1, 90, 1), (2, 85, 1), (3, 95, 2), (4, 80, 2)"
      ],
      "correctAnswer": "(1, 90, 1), (2, 85, 2), (3, 95, 1), (4, 80, 2)",
      "explanation": "NTILE(2) divides the scores into two buckets, with higher scores (95, 90) in bucket 1 and lower (85, 80) in bucket 2."
    },
    {
      "id": 3,
      "category": "SQL",
      "question": "What is the result of the following SQL query using a LATERAL join?",
      "code": "```sql\nCREATE TABLE Employees (id INT, dept_id INT);\nCREATE TABLE Departments (dept_id INT, dept_name VARCHAR(50));\nINSERT INTO Employees VALUES (1, 10), (2, 20);\nINSERT INTO Departments VALUES (10, 'HR'), (20, 'IT');\nSELECT e.id, d.dept_name\nFROM Employees e\nCROSS JOIN LATERAL (\n    SELECT dept_name\n    FROM Departments d\n    WHERE d.dept_id = e.dept_id\n) d;\n```",
      "options": [
        "(1, 'HR'), (2, 'IT')",
        "(1, 'IT'), (2, 'HR')",
        "Throws an error",
        "No rows"
      ],
      "correctAnswer": "(1, 'HR'), (2, 'IT')",
      "explanation": "The LATERAL join correlates the subquery with each employee, matching dept_id to dept_name."
    },
    {
      "id": 4,
      "category": "SQL",
      "question": "What does the following SQL query return when using JSON_ARRAYAGG?",
      "code": "```sql\nCREATE TABLE Products (id INT, name VARCHAR(50));\nINSERT INTO Products VALUES (1, 'Apple'), (2, 'Banana');\nSELECT JSON_ARRAYAGG(name) AS names\nFROM Products;\n```",
      "options": [
        "[\"Apple\",\"Banana\"]",
        "{\"Apple\",\"Banana\"}",
        "Throws an error",
        "NULL"
      ],
      "correctAnswer": "[\"Apple\",\"Banana\"]",
      "explanation": "JSON_ARRAYAGG aggregates the names into a JSON array."
    },
    {
      "id": 5,
      "category": "SQL",
      "question": "What is the output of the following SQL query using a trigger with a condition?",
      "code": "```sql\nCREATE TABLE Items (id INT, price INT);\nCREATE TABLE Logs (id INT, message VARCHAR(50));\nCREATE TRIGGER PriceCheck\nBEFORE INSERT ON Items\nFOR EACH ROW\nWHEN (NEW.price < 0)\nBEGIN\n    INSERT INTO Logs VALUES (NEW.id, 'Invalid price');\nEND;\nINSERT INTO Items VALUES (1, -10);\nSELECT message FROM Logs WHERE id = 1;\n```",
      "options": [
        "'Invalid price'",
        "Throws an error",
        "NULL",
        "No rows"
      ],
      "correctAnswer": "'Invalid price'",
      "explanation": "The trigger inserts a log entry when the price is negative, before the insert."
    },
    {
      "id": 6,
      "category": "SQL",
      "question": "What does the following SQL query return when using a window function with FIRST_VALUE?",
      "code": "```sql\nCREATE TABLE Sales (region VARCHAR(50), amount INT);\nINSERT INTO Sales VALUES ('North', 100), ('North', 200), ('South', 150);\nSELECT region, amount, FIRST_VALUE(amount) OVER (PARTITION BY region ORDER BY amount) AS min_sale\nFROM Sales\nORDER BY region, amount;\n```",
      "options": [
        "('North', 100, 100), ('North', 200, 100), ('South', 150, 150)",
        "('North', 100, 200), ('North', 200, 200), ('South', 150, 150)",
        "Throws an error",
        "('South', 150, 100)"
      ],
      "correctAnswer": "('North', 100, 100), ('North', 200, 100), ('South', 150, 150)",
      "explanation": "FIRST_VALUE returns the smallest amount per region, based on the ORDER BY."
    },
    {
      "id": 7,
      "category": "SQL",
      "question": "What is the result of the following SQL query using a generated column?",
      "code": "```sql\nCREATE TABLE Products (id INT, price INT, tax INT GENERATED ALWAYS AS (price * 0.1) STORED);\nINSERT INTO Products (id, price) VALUES (1, 100);\nSELECT tax FROM Products WHERE id = 1;\n```",
      "options": [
        "10",
        "100",
        "Throws an error",
        "NULL"
      ],
      "correctAnswer": "10",
      "explanation": "The generated column computes tax as 10% of price (100 * 0.1 = 10)."
    },
    {
      "id": 8,
      "category": "SQL",
      "question": "What does the following SQL query return when using a CTE with a self-reference?",
      "code": "```sql\nWITH RECURSIVE Tree(id, parent_id) AS (\n    SELECT 1, NULL\n    UNION ALL\n    SELECT 2, 1\n    UNION ALL\n    SELECT 3, 1\n)\nSELECT id FROM Tree WHERE parent_id IS NULL;\n```",
      "options": [
        "1",
        "2",
        "Throws an error",
        "No rows"
      ],
      "correctAnswer": "1",
      "explanation": "The CTE defines a tree, and the query selects the root node with no parent (id=1)."
    },
    {
      "id": 9,
      "category": "SQL",
      "question": "What is the output of the following SQL query using a stored function?",
      "code": "```sql\nCREATE TABLE Numbers (n INT);\nINSERT INTO Numbers VALUES (5), (10);\nDELIMITER //\nCREATE FUNCTION DoubleIt(x INT) RETURNS INT\nDETERMINISTIC\nBEGIN\n    RETURN x * 2;\nEND //\nDELIMITER ;\nSELECT DoubleIt(n) AS result FROM Numbers;\n```",
      "options": [
        "10, 20",
        "5, 10",
        "Throws an error",
        "NULL"
      ],
      "correctAnswer": "10, 20",
      "explanation": "The function doubles each number (5 * 2 = 10, 10 * 2 = 20)."
    },
    {
      "id": 10,
      "category": "SQL",
      "question": "What does the following SQL query return when using a table partitioning by range?",
      "code": "```sql\nCREATE TABLE Orders (order_id INT, order_date DATE)\nPARTITION BY RANGE (YEAR(order_date)) (\n    PARTITION p0 VALUES LESS THAN (2020),\n    PARTITION p1 VALUES LESS THAN (2021)\n);\nINSERT INTO Orders VALUES (1, '2020-06-01');\nSELECT order_id FROM Orders PARTITION (p1);\n```",
      "options": [
        "1",
        "No rows",
        "Throws an error",
        "NULL"
      ],
      "correctAnswer": "1",
      "explanation": "The order from 2020 falls into partition p1 (2020 < 2021)."
    },
    {
      "id": 11,
      "category": "SQL",
      "question": "What is the result of the following SQL query using a FULL OUTER JOIN with COALESCE?",
      "code": "```sql\nCREATE TABLE A (id INT, value INT);\nCREATE TABLE B (id INT, value INT);\nINSERT INTO A VALUES (1, 100);\nINSERT INTO B VALUES (2, 200);\nSELECT COALESCE(a.id, b.id) AS id, COALESCE(a.value, b.value) AS value\nFROM A FULL OUTER JOIN B ON a.id = b.id;\n```",
      "options": [
        "(1, 100), (2, 200)",
        "(1, 100)",
        "Throws an error",
        "No rows"
      ],
      "correctAnswer": "(1, 100), (2, 200)",
      "explanation": "FULL OUTER JOIN includes unmatched rows from both tables, and COALESCE combines their values."
    },
    {
      "id": 12,
      "category": "SQL",
      "question": "What does the following SQL query return when using a spatial index?",
      "code": "```sql\nCREATE TABLE Points (id INT, geom POINT);\nINSERT INTO Points VALUES (1, POINT(1, 1));\nCREATE SPATIAL INDEX idx_geom ON Points(geom);\nSELECT id FROM Points\nWHERE ST_Contains(ST_Buffer(POINT(0, 0), 2), geom);\n```",
      "options": [
        "1",
        "No rows",
        "Throws an error",
        "NULL"
      ],
      "correctAnswer": "1",
      "explanation": "The point (1, 1) is within a 2-unit buffer around (0, 0), so id 1 is returned."
    },
    {
      "id": 13,
      "category": "SQL",
      "question": "What is the output of the following SQL query using a transaction with isolation level?",
      "code": "```sql\nCREATE TABLE Accounts (id INT, balance INT);\nINSERT INTO Accounts VALUES (1, 1000);\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nSTART TRANSACTION;\nUPDATE Accounts SET balance = balance - 100 WHERE id = 1;\nSELECT balance FROM Accounts WHERE id = 1;\nCOMMIT;\n```",
      "options": [
        "900",
        "1000",
        "Throws an error",
        "NULL"
      ],
      "correctAnswer": "900",
      "explanation": "The SERIALIZABLE transaction updates the balance to 900, which is then selected."
    },
    {
      "id": 14,
      "category": "SQL",
      "question": "What does the following SQL query return when using a window function with LAG?",
      "code": "```sql\nCREATE TABLE Sales (sale_date DATE, amount INT);\nINSERT INTO Sales VALUES ('2023-01-01', 100), ('2023-01-02', 200);\nSELECT sale_date, amount, LAG(amount) OVER (ORDER BY sale_date) AS prev_amount\nFROM Sales;\n```",
      "options": [
        "('2023-01-01', 100, NULL), ('2023-01-02', 200, 100)",
        "('2023-01-01', 100, 100), ('2023-01-02', 200, 200)",
        "Throws an error",
        "No rows"
      ],
      "correctAnswer": "('2023-01-01', 100, NULL), ('2023-01-02', 200, 100)",
      "explanation": "LAG returns the previous rowâ€™s amount, with NULL for the first row."
    },
    {
      "id": 15,
      "category": "SQL",
      "question": "What is the result of the following SQL query using a dynamic cursor?",
      "code": "```sql\nCREATE TABLE Employees (id INT, name VARCHAR(50));\nINSERT INTO Employees VALUES (1, 'Alice'), (2, 'Bob');\nDECLARE @sql NVARCHAR(100) = 'DECLARE emp_cursor CURSOR FOR SELECT name FROM Employees';\nEXEC sp_executesql @sql;\nOPEN emp_cursor;\nFETCH NEXT FROM emp_cursor INTO @name;\nSELECT @name;\nCLOSE emp_cursor;\nDEALLOCATE emp_cursor;\n```",
      "options": [
        "'Alice'",
        "'Bob'",
        "Throws an error",
        "NULL"
      ],
      "correctAnswer": "'Alice'",
      "explanation": "The dynamic cursor fetches the first name, 'Alice'."
    }
  ]