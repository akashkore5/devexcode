[
    {
      "id": 1,
      "category": "Java",
      "question": "What is the output of the following Java code involving a custom Spliterator with parallel streams?",
      "code": "```java\nimport java.util.*;\nimport java.util.stream.StreamSupport;\npublic class Main {\n    public static void main(String[] args) {\n        Spliterator<Integer> spliterator = new Spliterator<>() {\n            int current = 0;\n            @Override\n            public boolean tryAdvance(java.util.function.Consumer<? super Integer> action) {\n                if (current < 3) {\n                    action.accept(current++);\n                    return true;\n                }\n                return false;\n            }\n            @Override\n            public Spliterator<Integer> trySplit() { return null; }\n            @Override\n            public long estimateSize() { return 3 - current; }\n            @Override\n            public int characteristics() { return ORDERED | IMMUTABLE; }\n        };\n        StreamSupport.stream(spliterator, true)\n                     .forEach(System.out::print);\n    }\n}\n```",
      "options": [
        "012",
        "Throws an exception",
        "Unpredictable order",
        "No output"
      ],
      "correctAnswer": "012",
      "explanation": "The custom Spliterator generates numbers 0, 1, 2 in order. Since trySplit returns null, parallel processing doesnâ€™t split the stream, and the output is sequential."
    },
    {
      "id": 2,
      "category": "Java",
      "question": "How does the following Java code behave with a custom ThreadLocal variable in a multi-threaded environment?",
      "code": "```java\npublic class Main {\n    private static final ThreadLocal<Integer> local = ThreadLocal.withInitial(() -> 0);\n    public static void main(String[] args) throws InterruptedException {\n        Runnable task = () -> {\n            local.set(local.get() + 1);\n            System.out.println(local.get());\n        };\n        Thread t1 = new Thread(task);\n        Thread t2 = new Thread(task);\n        t1.start(); t2.start();\n        t1.join(); t2.join();\n    }\n}\n```",
      "options": [
        "Prints '1' twice",
        "Prints '2' twice",
        "Throws an exception",
        "Unpredictable output"
      ],
      "correctAnswer": "Prints '1' twice",
      "explanation": "ThreadLocal provides a separate instance per thread. Each thread increments its own copy from 0 to 1, printing '1'."
    },
    {
      "id": 3,
      "category": "Java",
      "question": "What is the output of the following Java code using a Phaser for thread synchronization?",
      "code": "```java\nimport java.util.concurrent.Phaser;\npublic class Main {\n    public static void main(String[] args) {\n        Phaser phaser = new Phaser(3);\n        Runnable task = () -> {\n            phaser.arriveAndAwaitAdvance();\n            System.out.print(\"Done \");\n        };\n        new Thread(task).start();\n        new Thread(task).start();\n        new Thread(task).start();\n    }\n}\n```",
      "options": [
        "Prints 'Done Done Done '",
        "Hangs indefinitely",
        "Throws an exception",
        "No output"
      ],
      "correctAnswer": "Prints 'Done Done Done '",
      "explanation": "The Phaser synchronizes three threads. Each calls arriveAndAwaitAdvance, and all proceed to print 'Done' once all arrive."
    },
    {
      "id": 4,
      "category": "Java",
      "question": "What happens in the following Java code using a custom SecurityManager?",
      "code": "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.setSecurityManager(new SecurityManager() {\n            @Override\n            public void checkRead(String file) {\n                throw new SecurityException(\"No reading!\");\n            }\n        });\n        try {\n            new java.io.File(\"/tmp/test\").exists();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```",
      "options": [
        "Prints 'No reading!'",
        "Throws an exception",
        "No output",
        "Accesses the file"
      ],
      "correctAnswer": "Prints 'No reading!'",
      "explanation": "The custom SecurityManager throws a SecurityException for file read checks, caught and printed as 'No reading!'."
    },
    {
      "id": 5,
      "category": "Java",
      "question": "What is the output of the following Java code using a record with a compact constructor?",
      "code": "```java\npublic class Main {\n    record Point(int x, int y) {\n        Point {\n            if (x < 0 || y < 0) throw new IllegalArgumentException(\"Negative coordinates\");\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            Point p = new Point(-1, 2);\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```",
      "options": [
        "Prints 'Negative coordinates'",
        "Creates the Point object",
        "Throws a different exception",
        "No output"
      ],
      "correctAnswer": "Prints 'Negative coordinates'",
      "explanation": "The compact constructor validates coordinates, throwing an IllegalArgumentException for negative x, caught and printed."
    },
    {
      "id": 6,
      "category": "Java",
      "question": "What is the behavior of the following Java code using a sealed class hierarchy?",
      "code": "```java\nsealed interface Shape permits Circle, Rectangle {}\nfinal class Circle implements Shape {}\nfinal class Rectangle implements Shape {}\npublic class Main {\n    public static void main(String[] args) {\n        Shape shape = new Circle();\n        System.out.println(shape instanceof Circle);\n    }\n}\n```",
      "options": [
        "Prints 'true'",
        "Prints 'false'",
        "Throws an exception",
        "Compiles but fails at runtime"
      ],
      "correctAnswer": "Prints 'true'",
      "explanation": "The sealed interface restricts implementations to Circle and Rectangle. The shape variable holds a Circle, so instanceof returns true."
    },
    {
      "id": 7,
      "category": "Java",
      "question": "What is the output of the following Java code using a StampedLock for optimistic locking?",
      "code": "```java\nimport java.util.concurrent.locks.StampedLock;\npublic class Main {\n    static class Counter {\n        private int value = 0;\n        private final StampedLock lock = new StampedLock();\n        int read() {\n            long stamp = lock.tryOptimisticRead();\n            int result = value;\n            if (!lock.validate(stamp)) result = -1;\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        System.out.println(c.read());\n    }\n}\n```",
      "options": [
        "Prints '0'",
        "Prints '-1'",
        "Throws an exception",
        "Unpredictable output"
      ],
      "correctAnswer": "Prints '0'",
      "explanation": "The optimistic read succeeds since no write occurs, and the stamp is valid, returning the initial value 0."
    },
    {
      "id": 8,
      "category": "Java",
      "question": "What happens in the following Java code using a custom ExecutorService with a virtual thread?",
      "code": "```java\nimport java.util.concurrent.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\n        Future<String> future = executor.submit(() -> \"Task done\");\n        System.out.println(future.get());\n        executor.shutdown();\n    }\n}\n```",
      "options": [
        "Prints 'Task done'",
        "Throws an exception",
        "Hangs indefinitely",
        "No output"
      ],
      "correctAnswer": "Prints 'Task done'",
      "explanation": "The virtual thread executes the task, returning 'Task done' via the Future."
    },
    {
      "id": 9,
      "category": "Java",
      "question": "What is the output of the following Java code using a custom annotation processor?",
      "code": "```java\npublic class Main {\n    @interface MyAnnotation {}\n    @MyAnnotation\n    static class Annotated {}\n    public static void main(String[] args) {\n        System.out.println(Annotated.class.isAnnotationPresent(MyAnnotation.class));\n    }\n}\n```",
      "options": [
        "Prints 'true'",
        "Prints 'false'",
        "Throws an exception",
        "Compiles but fails at runtime"
      ],
      "correctAnswer": "Prints 'true'",
      "explanation": "The @MyAnnotation is present on Annotated, so isAnnotationPresent returns true."
    },
    {
      "id": 10,
      "category": "Java",
      "question": "What is the output of the following Java code using a Pattern Matching Switch (Java 21)?",
      "code": "```java\npublic class Main {\n    public static void main(String[] args) {\n        Object obj = new Integer(42);\n        String result = switch (obj) {\n            case Integer i when i > 0 -> \"Positive\";\n            case Integer i -> \"Non-positive\";\n            default -> \"Other\";\n        };\n        System.out.println(result);\n    }\n}\n```",
      "options": [
        "Prints 'Positive'",
        "Prints 'Non-positive'",
        "Prints 'Other'",
        "Throws an exception"
      ],
      "correctAnswer": "Prints 'Positive'",
      "explanation": "The switch uses pattern matching to check if obj is an Integer and applies the guard clause i > 0, resulting in 'Positive'."
    },
    {
      "id": 11,
      "category": "Java",
      "question": "What is the behavior of the following Java code using a custom ForkJoinPool?",
      "code": "```java\nimport java.util.concurrent.*;\npublic class Main extends RecursiveTask<Integer> {\n    private final int n;\n    Main(int n) { this.n = n; }\n    @Override\n    protected Integer compute() {\n        if (n <= 1) return n;\n        Main left = new Main(n - 1);\n        left.fork();\n        return n + left.join();\n    }\n    public static void main(String[] args) {\n        ForkJoinPool pool = new ForkJoinPool(2);\n        System.out.println(pool.invoke(new Main(3)));\n    }\n}\n```",
      "options": [
        "Prints '6'",
        "Prints '3'",
        "Throws an exception",
        "Hangs indefinitely"
      ],
      "correctAnswer": "Prints '6'",
      "explanation": "The task computes 3 + 2 + 1 = 6 using recursive fork/join."
    },
    {
      "id": 12,
      "category": "Java",
      "question": "What is the output of the following Java code using a custom class loader delegation?",
      "code": "```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ClassLoader parent = Main.class.getClassLoader();\n        ClassLoader custom = new ClassLoader(parent) {};\n        Class<?> clazz = custom.loadClass(\"java.lang.Object\");\n        System.out.println(clazz.getClassLoader() == null);\n    }\n}\n```",
      "options": [
        "Prints 'true'",
        "Prints 'false'",
        "Throws an exception",
        "No output"
      ],
      "correctAnswer": "Prints 'true'",
      "explanation": "java.lang.Object is loaded by the bootstrap class loader (null), not the custom loader."
    },
    {
      "id": 13,
      "category": "Java",
      "question": "What happens in the following Java code using a custom serialization proxy?",
      "code": "```java\nimport java.io.*;\npublic class Main implements Serializable {\n    private static class SerializationProxy implements Serializable {\n        private final int data;\n        SerializationProxy(Main m) { data = 42; }\n        private Object readResolve() { return new Main(); }\n    }\n    private Object writeReplace() { return new SerializationProxy(this); }\n    public static void main(String[] args) throws Exception {\n        Main m = new Main();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(m);\n        System.out.println(baos.size() > 0);\n    }\n}\n```",
      "options": [
        "Prints 'true'",
        "Prints 'false'",
        "Throws an exception",
        "No output"
      ],
      "correctAnswer": "Prints 'true'",
      "explanation": "The serialization proxy is written to the stream, resulting in a non-empty output stream."
    },
    {
      "id": 14,
      "category": "Java",
      "question": "What is the output of the following Java code using a custom Thread.UncaughtExceptionHandler?",
      "code": "```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread.UncaughtExceptionHandler handler = (t, e) -> System.out.println(\"Caught: \" + e.getMessage());\n        Thread t = new Thread(() -> { throw new RuntimeException(\"Error\"); });\n        t.setUncaughtExceptionHandler(handler);\n        t.start();\n        try { Thread.sleep(100); } catch (Exception ignored) {}\n    }\n}\n```",
      "options": [
        "Prints 'Caught: Error'",
        "Throws an exception",
        "No output",
        "Prints 'Error'"
      ],
      "correctAnswer": "Prints 'Caught: Error'",
      "explanation": "The uncaught exception is handled by the custom handler, printing 'Caught: Error'."
    },
    {
      "id": 15,
      "category": "Java",
      "question": "What is the output of the following Java code using a custom Collector?",
      "code": "```java\nimport java.util.*;\nimport java.util.stream.*;\npublic class Main {\n    public static void main(String[] args) {\n        Collector<Integer, List<Integer>, Integer> collector = Collector.of(\n            ArrayList::new,\n            List::add,\n            (a, b) -> { a.addAll(b); return a; },\n            List::size\n        );\n        int result = Stream.of(1, 2, 3).collect(collector);\n        System.out.println(result);\n    }\n}\n```",
      "options": [
        "Prints '3'",
        "Prints '6'",
        "Throws an exception",
        "No output"
      ],
      "correctAnswer": "Prints '3'",
      "explanation": "The custom Collector accumulates elements into a List and returns its size (3)."
    }
  ]