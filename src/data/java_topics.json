{
  "topics": [
    {
      "id": "core-java",
      "title": "Core Java",
      "slug": "core-java",
      "description": "Master fundamental Java concepts essential for all developers, forming the foundation for building robust applications.",
      "difficulty": "Beginner",
      "tags": ["Java", "Basics", "Programming", "Interview"],
      "subtopics": [
        {
          "id": "core-java-basics",
          "title": "Java Basics",
          "slug": "core-java-basics",
          "description": "Understand Java syntax, data types, variables, operators, and control flow (if-else, loops).",
          "difficulty": "Beginner",
          "tags": ["Java", "Basics", "Beginner", "Interview"],
          "related_questions": [
            "What is the difference between JDK, JRE, and JVM?",
            "Explain the significance of the 'public static void main' method in Java.",
            "How do primitive and reference types differ in Java?"
          ]
        },
        {
          "id": "core-java-oops",
          "title": "OOPs Concepts",
          "slug": "core-java-oops",
          "description": "Learn Object-Oriented Programming principles like inheritance, polymorphism, encapsulation, and abstraction.",
          "difficulty": "Beginner",
          "tags": ["OOPs", "Java", "Beginner", "Interview"],
          "related_questions": [
            "What are the four pillars of OOP in Java?",
            "Explain the difference between method overloading and method overriding.",
            "How does abstraction differ from encapsulation?"
          ]
        },
        {
          "id": "core-java-collections",
          "title": "Collections Framework",
          "slug": "core-java-collections",
          "description": "Utilize Java's built-in data structures like List, Set, Map, and their implementations (ArrayList, HashSet, HashMap).",
          "difficulty": "Beginner",
          "tags": ["Collections", "Java", "Beginner", "Interview"],
          "related_questions": [
            "What is the difference between ArrayList and LinkedList?",
            "How does HashMap work internally in Java?",
            "Explain the difference between Set and List interfaces."
          ]
        },
        {
          "id": "core-java-exceptions",
          "title": "Exception Handling",
          "slug": "core-java-exceptions",
          "description": "Manage errors using try-catch, throw, throws, and custom exceptions.",
          "difficulty": "Beginner",
          "tags": ["Exceptions", "Java", "Beginner", "Interview"],
          "related_questions": [
            "What is the difference between checked and unchecked exceptions?",
            "Explain the hierarchy of exception classes in Java.",
            "How do you create a custom exception in Java?"
          ]
        },
        {
          "id": "core-java-collections-internal-working",
          "title": "Core Java Collections: Internal Working of List, Set, Map, and Queue",
          "slug": "core-java-collections-internal-working",
          "description": "Utilize Java's built-in data structures like List, Set, Map, and their implementations (ArrayList, HashSet, HashMap).",
          "difficulty": "Beginner",
          "tags": ["Collections", "Java", "Beginner", "Interview"],
          "related_questions": [
            "What is the difference between ArrayList and LinkedList?",
            "How does HashMap work internally in Java?",
            "Explain the difference between Set and List interfaces."
          ]
        },
        {
          "id": "core-java-io",
          "title": "Input/Output Streams",
          "slug": "core-java-io",
          "description": "Work with file handling and I/O operations using streams, readers, and writers.",
          "difficulty": "Intermediate",
          "tags": ["IO", "Java", "Intermediate"],
          "related_questions": [
            "What is the difference between InputStream and Reader classes?",
            "How do you read a file using BufferedReader in Java?",
            "Explain the role of FileOutputStream in Java."
          ]
        },
        {
          "id": "core-java-strings",
          "title": "Strings and String Handling",
          "slug": "core-java-strings",
          "description": "Master String manipulation, StringBuilder, StringBuffer, and immutability concepts.",
          "difficulty": "Beginner",
          "tags": ["Strings", "Java", "Beginner", "Interview"],
          "related_questions": [
            "Why are Strings immutable in Java?",
            "What is the difference between StringBuilder and StringBuffer?",
            "How does the '==' operator differ from the equals() method for Strings?"
          ]
        },
        {
          "id": "core-java-annotations",
          "title": "Annotations",
          "slug": "core-java-annotations",
          "description": "Use built-in and custom annotations for metadata and code processing.",
          "difficulty": "Intermediate",
          "tags": ["Annotations", "Java", "Intermediate"],
          "related_questions": [
            "What are annotations in Java and their use cases?",
            "Explain the @Override annotation and its purpose.",
            "How do you create a custom annotation in Java?"
          ]
        },
        {
          "id": "core-java-generics",
          "title": "Generics",
          "slug": "core-java-generics",
          "description": "Implement type-safe collections and methods using generics and bounded types.",
          "difficulty": "Intermediate",
          "tags": ["Generics", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What are generics in Java and why are they used?",
            "Explain bounded type parameters in generics.",
            "What is type erasure in Java generics?"
          ]
        },
        {
          "id": "core-java-inner-classes",
          "title": "Inner Classes",
          "slug": "core-java-inner-classes",
          "description": "Understand nested, static, and anonymous inner classes and their use cases.",
          "difficulty": "Intermediate",
          "tags": ["Inner Classes", "Java", "Intermediate"],
          "related_questions": [
            "What is the difference between a static and non-static inner class?",
            "Explain the use of anonymous inner classes in Java.",
            "How are local inner classes defined and used?"
          ]
        },
        {
          "id": "core-java-serialization",
          "title": "Serialization and Deserialization",
          "slug": "core-java-serialization",
          "description": "Persist and reconstruct objects using Java's serialization mechanism.",
          "difficulty": "Intermediate",
          "tags": ["Serialization", "Java", "Intermediate"],
          "related_questions": [
            "What is serialization and why is it used in Java?",
            "Explain the role of the transient keyword in serialization.",
            "How do you customize the serialization process?"
          ]
        },
        {
          "id": "core-java-multithreading",
          "title": "Multithreading Basics",
          "slug": "core-java-multithreading",
          "description": "Learn the fundamentals of creating and managing threads in Java for concurrent programming.",
          "difficulty": "Intermediate",
          "tags": ["Multithreading", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is the difference between a thread and a process in Java?",
            "How do you create a thread using the Thread class and Runnable interface?",
            "Explain the role of the synchronized keyword in Java."
          ]
        },
        {
          "id": "core-java-packages",
          "title": "Java Packages and Access Modifiers",
          "slug": "core-java-packages",
          "description": "Organize code using packages and control access with public, private, protected, and default modifiers.",
          "difficulty": "Beginner",
          "tags": ["Packages", "Java", "Access Modifiers", "Beginner"],
          "related_questions": [
            "What is the purpose of packages in Java?",
            "How do access modifiers affect class, method, and variable visibility?",
            "Explain the difference between protected and default access modifiers."
          ]
        },
        {
          "id": "core-java-date-time",
          "title": "Java Date and Time API",
          "slug": "core-java-date-time",
          "description": "Work with modern date and time handling using Java's java.time package (LocalDate, LocalTime, etc.).",
          "difficulty": "Intermediate",
          "tags": ["Date and Time", "Java", "Intermediate"],
          "related_questions": [
            "What is the difference between java.util.Date and java.time.LocalDate?",
            "How do you format a date using DateTimeFormatter in Java?",
            "Explain the role of the ZoneId class in the Java Date and Time API."
          ]
        }
      ]
    },
    {
      "id": "advanced-java",
      "title": "Advanced Java",
      "slug": "advanced-java",
      "description": "Explore in-depth Java features for building scalable, performant, and complex systems.",
      "difficulty": "Intermediate",
      "tags": ["Java", "Advanced", "Concurrency", "Interview"],
      "subtopics": [
        {
          "id": "advanced-java-multithreading",
          "title": "Multithreading",
          "slug": "advanced-java-multithreading",
          "description": "Master concurrent programming with threads, executors, and synchronization mechanisms.",
          "difficulty": "Intermediate",
          "tags": ["Multithreading", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is the difference between a thread and a process?",
            "Explain the use of the synchronized keyword in Java.",
            "How does the ThreadPoolExecutor work in Java?"
          ]
        },
        {
          "id": "advanced-java-concurrency",
          "title": "Concurrency Utilities",
          "slug": "advanced-java-concurrency",
          "description": "Use java.util.concurrent package for locks, semaphores, and thread pools.",
          "difficulty": "Advanced",
          "tags": ["Concurrency", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What is a ReentrantLock and how does it differ from synchronized?",
            "Explain the purpose of the Fork/Join framework.",
            "How does a ConcurrentHashMap work in Java?"
          ]
        },
        {
          "id": "advanced-java-memory",
          "title": "Java Memory Model",
          "slug": "advanced-java-memory",
          "description": "Understand memory management, garbage collection, and JVM optimization techniques.",
          "difficulty": "Advanced",
          "tags": ["JVM", "Memory", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What are the different memory areas in the JVM?",
            "Explain the garbage collection process in Java.",
            "How can you optimize JVM performance?"
          ]
        },
        {
          "id": "advanced-java-patterns",
          "title": "Design Patterns",
          "slug": "advanced-java-patterns",
          "description": "Apply creational, structural, and behavioral patterns like Singleton, Factory, and Observer.",
          "difficulty": "Intermediate",
          "tags": ["Design Patterns", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is the Singleton pattern and how is it implemented in Java?",
            "Explain the Factory Method pattern with an example.",
            "How does the Observer pattern work in Java?"
          ]
        },
        {
          "id": "advanced-java-reflection",
          "title": "Reflection",
          "slug": "advanced-java-reflection",
          "description": "Use Java's reflection API for dynamic class and method manipulation.",
          "difficulty": "Advanced",
          "tags": ["Reflection", "Java", "Advanced"],
          "related_questions": [
            "What is reflection in Java and when should it be used?",
            "How do you access private fields using reflection?",
            "What are the drawbacks of using reflection?"
          ]
        },
        {
          "id": "advanced-java-lambda",
          "title": "Lambda Expressions & Streams",
          "slug": "advanced-java-lambda",
          "description": "Leverage functional programming with lambda expressions and the Stream API.",
          "difficulty": "Intermediate",
          "tags": ["Lambda", "Streams", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is a lambda expression and how is it used in Java?",
            "Explain the difference between map() and flatMap() in Streams.",
            "How does the Stream API improve performance?"
          ]
        },
        {
          "id": "advanced-java-modules",
          "title": "Java Modules (JPMS)",
          "slug": "advanced-java-modules",
          "description": "Organize code using the Java Platform Module System for modularity.",
          "difficulty": "Advanced",
          "tags": ["Modules", "Java", "Advanced"],
          "related_questions": [
            "What is the Java Platform Module System (JPMS)?",
            "How do you define a module in Java?",
            "What are the benefits of using JPMS?"
          ]
        },
        {
          "id": "advanced-java-jni",
          "title": "Java Native Interface (JNI)",
          "slug": "advanced-java-jni",
          "description": "Integrate Java with native code (C/C++) using JNI.",
          "difficulty": "Advanced",
          "tags": ["JNI", "Java", "Advanced"],
          "related_questions": [
            "What is JNI and why is it used?",
            "How do you call a C function from Java using JNI?",
            "What are the challenges of using JNI?"
          ]
        },
        {
          "id": "advanced-java-performance",
          "title": "Performance Tuning",
          "slug": "advanced-java-performance",
          "description": "Optimize Java applications for speed and memory efficiency.",
          "difficulty": "Advanced",
          "tags": ["Performance", "Java", "Advanced"],
          "related_questions": [
            "How do you profile a Java application for performance?",
            "What are some common performance bottlenecks in Java?",
            "How can you reduce memory leaks in Java?"
          ]
        },
        {
          "id": "advanced-java-jvm-internals",
          "title": "JVM Internals",
          "slug": "advanced-java-jvm-internals",
          "description": "Dive into JVM architecture, class loading, and runtime optimizations.",
          "difficulty": "Advanced",
          "tags": ["JVM", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What is the role of the ClassLoader in the JVM?",
            "Explain the JIT compiler in the JVM.",
            "How does the JVM handle method inlining?"
          ]
        }
      ]
    },
    {
      "id": "spring-framework",
      "title": "Spring Framework",
      "slug": "spring-framework",
      "description": "Core framework for building modern Java enterprise applications with dependency injection and modularity.",
      "difficulty": "Intermediate",
      "tags": ["Spring", "Enterprise", "Java", "Interview"],
      "subtopics": [
        {
          "id": "spring-core",
          "title": "Spring Core",
          "slug": "spring-core",
          "description": "Understand dependency injection, IoC container, and bean lifecycle in Spring.",
          "difficulty": "Intermediate",
          "tags": ["Spring", "Core", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is Inversion of Control (IoC) in Spring?",
            "Explain the lifecycle of a Spring bean.",
            "What is the difference between @Component and @Bean annotations?"
          ]
        },
        {
          "id": "spring-boot",
          "title": "Spring Boot",
          "slug": "spring-boot",
          "description": "Build production-ready applications with minimal configuration and embedded servers.",
          "difficulty": "Intermediate",
          "tags": ["Spring Boot", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What are the advantages of Spring Boot over Spring?",
            "How does Spring Boot auto-configuration work?",
            "What is the role of the @SpringBootApplication annotation?"
          ]
        },
        {
          "id": "spring-mvc",
          "title": "Spring MVC",
          "slug": "spring-mvc",
          "description": "Develop web applications using Spring's Model-View-Controller framework.",
          "difficulty": "Intermediate",
          "tags": ["Spring MVC", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is the DispatcherServlet in Spring MVC?",
            "Explain the flow of a request in Spring MVC.",
            "How do you handle form submissions in Spring MVC?"
          ]
        },
        {
          "id": "spring-security",
          "title": "Spring Security",
          "slug": "spring-security",
          "description": "Implement authentication, authorization, and secure APIs with Spring Security.",
          "difficulty": "Intermediate",
          "tags": ["Security", "Spring", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "How does Spring Security handle authentication?",
            "What is the purpose of the @PreAuthorize annotation?",
            "How do you configure Spring Security for JWT-based authentication?"
          ]
        },
        {
          "id": "spring-webflux",
          "title": "Spring WebFlux",
          "slug": "spring-webflux",
          "description": "Develop reactive, non-blocking web applications using Spring WebFlux.",
          "difficulty": "Advanced",
          "tags": ["Reactive", "Spring", "Java", "Advanced"],
          "related_questions": [
            "What is the difference between Spring MVC and Spring WebFlux?",
            "How does reactive programming work in Spring WebFlux?",
            "What are the benefits of using Project Reactor in WebFlux?"
          ]
        },
        {
          "id": "spring-cloud",
          "title": "Spring Cloud",
          "slug": "spring-cloud",
          "description": "Create distributed systems with microservices and cloud-native patterns.",
          "difficulty": "Advanced",
          "tags": ["Microservices", "Spring", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What is Spring Cloud Config and how is it used?",
            "How does Spring Cloud Gateway work as an API gateway?",
            "Explain service discovery with Eureka in Spring Cloud."
          ]
        },
        {
          "id": "spring-data",
          "title": "Spring Data",
          "slug": "spring-data",
          "description": "Simplify database access with Spring Data JPA, MongoDB, and Redis integrations.",
          "difficulty": "Intermediate",
          "tags": ["Spring Data", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is Spring Data JPA and how does it simplify database access?",
            "How do you define a repository in Spring Data?",
            "What is the difference between CrudRepository and JpaRepository?"
          ]
        },
        {
          "id": "spring-batch",
          "title": "Spring Batch",
          "slug": "spring-batch",
          "description": "Process large volumes of data with Spring Batch for ETL jobs.",
          "difficulty": "Advanced",
          "tags": ["Spring Batch", "Java", "Advanced"],
          "related_questions": [
            "What is the architecture of Spring Batch?",
            "How do you configure a job in Spring Batch?",
            "What are the differences between ItemReader, ItemProcessor, and ItemWriter?"
          ]
        },
        {
          "id": "spring-integration",
          "title": "Spring Integration",
          "slug": "spring-integration",
          "description": "Build messaging-driven integrations with Spring Integration.",
          "difficulty": "Advanced",
          "tags": ["Spring Integration", "Java", "Advanced"],
          "related_questions": [
            "What is Spring Integration and its use cases?",
            "How do you configure a message channel in Spring Integration?",
            "What is the role of the IntegrationFlow in Spring Integration?"
          ]
        }
      ]
    },
    {
      "id": "hibernate-jpa",
      "title": "Hibernate & JPA",
      "slug": "hibernate-jpa",
      "description": "Object-Relational Mapping for seamless database interactions in Java applications.",
      "difficulty": "Intermediate",
      "tags": ["ORM", "Hibernate", "Java", "Interview"],
      "subtopics": [
        {
          "id": "hibernate-jpa-core",
          "title": "JPA Basics",
          "slug": "hibernate-jpa-core",
          "description": "Understand JPA entities, persistence context, and EntityManager.",
          "difficulty": "Intermediate",
          "tags": ["JPA", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is the role of the EntityManager in JPA?",
            "How do you define a JPA entity in Java?",
            "What is the persistence context in JPA?"
          ]
        },
        {
          "id": "hibernate-jpa-orm",
          "title": "Real-world ORM Usage",
          "slug": "hibernate-jpa-orm",
          "description": "Master entity mapping, relationships, and query optimization with Hibernate and JPA.",
          "difficulty": "Intermediate",
          "tags": ["Hibernate", "JPA", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What are the different types of relationships in JPA?",
            "How do you map a one-to-many relationship in Hibernate?",
            "What is the N+1 query problem in Hibernate?"
          ]
        },
        {
          "id": "hibernate-jpa-advanced",
          "title": "Advanced Hibernate Features",
          "slug": "hibernate-jpa-advanced",
          "description": "Explore caching, lazy loading, and performance tuning in Hibernate.",
          "difficulty": "Advanced",
          "tags": ["Hibernate", "JPA", "Java", "Advanced"],
          "related_questions": [
            "What is the difference between lazy and eager loading in Hibernate?",
            "How does the second-level cache work in Hibernate?",
            "What are some ways to optimize Hibernate performance?"
          ]
        },
        {
          "id": "hibernate-jpa-queries",
          "title": "JPQL and Criteria API",
          "slug": "hibernate-jpa-queries",
          "description": "Write complex database queries using JPQL and the Criteria API.",
          "difficulty": "Intermediate",
          "tags": ["JPQL", "Criteria", "Java", "Intermediate"],
          "related_questions": [
            "What is JPQL and how does it differ from SQL?",
            "How do you write a query using the Criteria API?",
            "What are the advantages of using named queries in JPA?"
          ]
        },
        {
          "id": "hibernate-jpa-transactions",
          "title": "Transaction Management",
          "slug": "hibernate-jpa-transactions",
          "description": "Manage transactions in Hibernate and JPA for data consistency.",
          "difficulty": "Intermediate",
          "tags": ["Transactions", "Hibernate", "Java", "Intermediate"],
          "related_questions": [
            "What is a transaction in the context of Hibernate?",
            "How do you manage transactions in JPA?",
            "What is the difference between programmatic and declarative transaction management?"
          ]
        }
      ]
    },
    {
      "id": "testing",
      "title": "Testing",
      "slug": "testing",
      "description": "Ensure code quality with comprehensive testing frameworks and methodologies.",
      "difficulty": "Intermediate",
      "tags": ["Testing", "Java", "Quality", "Interview"],
      "subtopics": [
        {
          "id": "testing-junit",
          "title": "JUnit",
          "slug": "testing-junit",
          "description": "Write unit tests for Java applications using JUnit 5.",
          "difficulty": "Beginner",
          "tags": ["JUnit", "Testing", "Java", "Beginner", "Interview"],
          "related_questions": [
            "What are the key features of JUnit 5?",
            "How do you write a parameterized test in JUnit?",
            "What is the difference between @BeforeEach and @BeforeAll?"
          ]
        },
        {
          "id": "testing-mockito",
          "title": "Mockito",
          "slug": "testing-mockito",
          "description": "Mock dependencies for isolated unit testing with Mockito.",
          "difficulty": "Intermediate",
          "tags": ["Mockito", "Testing", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is mocking and why is it useful in testing?",
            "How do you mock a method in Mockito?",
            "What is the difference between @Mock and @InjectMocks?"
          ]
        },
        {
          "id": "testing-testng",
          "title": "TestNG",
          "slug": "testing-testng",
          "description": "Use TestNG for advanced testing features like parallel execution and data-driven tests.",
          "difficulty": "Intermediate",
          "tags": ["TestNG", "Testing", "Java", "Intermediate"],
          "related_questions": [
            "What are the advantages of TestNG over JUnit?",
            "How do you run tests in parallel using TestNG?",
            "What is a DataProvider in TestNG?"
          ]
        },
        {
          "id": "testing-integration",
          "title": "Integration Testing",
          "slug": "testing-integration",
          "description": "Test application components together using tools like Spring Test.",
          "difficulty": "Intermediate",
          "tags": ["Integration", "Testing", "Java", "Intermediate"],
          "related_questions": [
            "What is the difference between unit and integration testing?",
            "How do you write an integration test using Spring Test?",
            "What is the role of @SpringBootTest annotation?"
          ]
        },
        {
          "id": "testing-performance",
          "title": "Performance Testing",
          "slug": "testing-performance",
          "description": "Measure application performance under load using JMeter or Gatling.",
          "difficulty": "Advanced",
          "tags": ["Performance", "Testing", "Java", "Advanced"],
          "related_questions": [
            "What is performance testing and why is it important?",
            "How do you set up a JMeter test for a Java application?",
            "What are the key metrics to monitor in performance testing?"
          ]
        },
        {
          "id": "testing-bdd",
          "title": "Behavior-Driven Development (BDD)",
          "slug": "testing-bdd",
          "description": "Write tests using BDD frameworks like Cucumber for better collaboration.",
          "difficulty": "Intermediate",
          "tags": ["BDD", "Cucumber", "Testing", "Java", "Intermediate"],
          "related_questions": [
            "What is BDD and how does it differ from TDD?",
            "How do you write a feature file in Cucumber?",
            "What is the role of step definitions in Cucumber?"
          ]
        }
      ]
    },
    {
      "id": "build-tools",
      "title": "Build Tools",
      "slug": "build-tools",
      "description": "Automate and manage project builds efficiently with industry-standard tools.",
      "difficulty": "Beginner",
      "tags": ["Build", "Java", "Automation", "Interview"],
      "subtopics": [
        {
          "id": "build-tools-maven",
          "title": "Maven",
          "slug": "build-tools-maven",
          "description": "Manage dependencies and build Java projects with Maven's POM files.",
          "difficulty": "Beginner",
          "tags": ["Maven", "Build", "Java", "Beginner", "Interview"],
          "related_questions": [
            "What is the purpose of the POM file in Maven?",
            "How do you add a dependency in Maven?",
            "What is the difference between a snapshot and a release in Maven?"
          ]
        },
        {
          "id": "build-tools-gradle",
          "title": "Gradle",
          "slug": "build-tools-gradle",
          "description": "Use Gradle for flexible and performant build automation with Groovy or Kotlin scripts.",
          "difficulty": "Intermediate",
          "tags": ["Gradle", "Build", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What are the advantages of Gradle over Maven?",
            "How do you define a task in Gradle?",
            "What is the role of the build.gradle file?"
          ]
        },
        {
          "id": "build-tools-ant",
          "title": "Apache Ant",
          "slug": "build-tools-ant",
          "description": "Understand legacy build automation with Apache Ant for Java projects.",
          "difficulty": "Beginner",
          "tags": ["Ant", "Build", "Java", "Beginner"],
          "related_questions": [
            "What is Apache Ant and how does it work?",
            "How do you define a target in an Ant build file?",
            "What are the limitations of Ant compared to Maven?"
          ]
        }
      ]
    },
    {
      "id": "logging",
      "title": "Logging",
      "slug": "logging",
      "description": "Implement effective logging for debugging and monitoring Java applications.",
      "difficulty": "Intermediate",
      "tags": ["Logging", "Java", "Monitoring", "Interview"],
      "subtopics": [
        {
          "id": "logging-logback",
          "title": "Logback",
          "slug": "logging-logback",
          "description": "Configure advanced logging with Logback for performance and flexibility.",
          "difficulty": "Intermediate",
          "tags": ["Logback", "Logging", "Java", "Intermediate"],
          "related_questions": [
            "What is Logback and how does it differ from Log4j?",
            "How do you configure an appender in Logback?",
            "What is the role of the logback.xml file?"
          ]
        },
        {
          "id": "logging-slf4j",
          "title": "SLF4J",
          "slug": "logging-slf4j",
          "description": "Use SLF4J as a logging facade to integrate with various logging frameworks.",
          "difficulty": "Intermediate",
          "tags": ["SLF4J", "Logging", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is SLF4J and why is it used?",
            "How does SLF4J integrate with Logback?",
            "What is the difference between a logger and a logger factory in SLF4J?"
          ]
        },
        {
          "id": "logging-log4j",
          "title": "Log4j",
          "slug": "logging-log4j",
          "description": "Implement logging with Apache Log4j for detailed application insights.",
          "difficulty": "Intermediate",
          "tags": ["Log4j", "Logging", "Java", "Intermediate"],
          "related_questions": [
            "What are the main components of Log4j?",
            "How do you configure Log4j using properties or XML?",
            "What is the difference between Log4j 1.x and Log4j 2.x?"
          ]
        }
      ]
    },
    {
      "id": "databases",
      "title": "Databases",
      "slug": "databases",
      "description": "Work with relational and non-relational databases for data persistence.",
      "difficulty": "Intermediate",
      "tags": ["Databases", "Java", "Persistence", "Interview"],
      "subtopics": [
        {
          "id": "databases-jdbc",
          "title": "JDBC",
          "slug": "databases-jdbc",
          "description": "Connect and query databases using Java Database Connectivity (JDBC).",
          "difficulty": "Beginner",
          "tags": ["JDBC", "Databases", "Java", "Beginner", "Interview"],
          "related_questions": [
            "What is JDBC and how does it work?",
            "Explain the steps to connect to a database using JDBC.",
            "What is the difference between Statement and PreparedStatement?"
          ]
        },
        {
          "id": "databases-rdbms",
          "title": "RDBMS",
          "slug": "databases-rdbms",
          "description": "Design and query relational databases like MySQL, PostgreSQL, and Oracle.",
          "difficulty": "Intermediate",
          "tags": ["RDBMS", "Databases", "Java", "Intermediate"],
          "related_questions": [
            "What is normalization in relational databases?",
            "How do you write a JOIN query in SQL?",
            "What are the differences between MySQL and PostgreSQL?"
          ]
        },
        {
          "id": "databases-nosql",
          "title": "NoSQL",
          "slug": "databases-nosql",
          "description": "Use NoSQL databases like MongoDB, Cassandra, and DynamoDB for scalability.",
          "difficulty": "Advanced",
          "tags": ["NoSQL", "MongoDB", "Java", "Advanced"],
          "related_questions": [
            "What are the key differences between SQL and NoSQL databases?",
            "How do you query MongoDB from a Java application?",
            "What is the CAP theorem and how does it apply to NoSQL?"
          ]
        },
        {
          "id": "databases-orm",
          "title": "ORM Alternatives",
          "slug": "databases-orm",
          "description": "Explore ORM frameworks like MyBatis for lightweight database access.",
          "difficulty": "Intermediate",
          "tags": ["MyBatis", "ORM", "Java", "Intermediate"],
          "related_questions": [
            "What is MyBatis and how does it differ from Hibernate?",
            "How do you configure a mapper in MyBatis?",
            "What are the advantages of using MyBatis over JPA?"
          ]
        }
      ]
    },
    {
      "id": "web-security",
      "title": "Web Security Concepts",
      "slug": "web-security",
      "description": "Secure Java applications against common vulnerabilities and threats.",
      "difficulty": "Intermediate",
      "tags": ["Security", "Java", "Web", "Interview"],
      "subtopics": [
        {
          "id": "web-security-owasp",
          "title": "OWASP Best Practices",
          "slug": "web-security-owasp",
          "description": "Implement OWASP top 10 security practices, including CSRF and XSS prevention.",
          "difficulty": "Intermediate",
          "tags": ["OWASP", "Security", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What are the OWASP Top 10 vulnerabilities?",
            "How do you prevent Cross-Site Scripting (XSS) in a Java application?",
            "What is CSRF and how can it be mitigated?"
          ]
        },
        {
          "id": "web-security-auth",
          "title": "Authentication & Authorization",
          "slug": "web-security-auth",
          "description": "Secure applications with OAuth2, JWT, and role-based access control.",
          "difficulty": "Advanced",
          "tags": ["Authentication", "Security", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What is the difference between OAuth2 and OpenID Connect?",
            "How do you implement JWT-based authentication in Java?",
            "What is role-based access control (RBAC)?"
          ]
        },
        {
          "id": "web-security-encryption",
          "title": "Encryption and Hashing",
          "slug": "web-security-encryption",
          "description": "Use encryption (AES) and hashing (SHA, bcrypt) for data security.",
          "difficulty": "Intermediate",
          "tags": ["Encryption", "Security", "Java", "Intermediate"],
          "related_questions": [
            "What is the difference between encryption and hashing?",
            "How do you implement AES encryption in Java?",
            "Why is bcrypt preferred for password hashing?"
          ]
        },
        {
          "id": "web-security-secure-coding",
          "title": "Secure Coding Practices",
          "slug": "web-security-secure-coding",
          "description": "Write secure Java code to prevent SQL injection and other vulnerabilities.",
          "difficulty": "Intermediate",
          "tags": ["Secure Coding", "Security", "Java", "Intermediate"],
          "related_questions": [
            "How do you prevent SQL injection in a Java application?",
            "What are some secure coding practices for Java?",
            "How can you sanitize user input in a Java web application?"
          ]
        }
      ]
    },
    {
      "id": "rest-apis",
      "title": "REST APIs",
      "slug": "rest-apis",
      "description": "Design and build scalable RESTful services for web applications.",
      "difficulty": "Intermediate",
      "tags": ["REST", "APIs", "Java", "Interview"],
      "subtopics": [
        {
          "id": "rest-apis-development",
          "title": "REST API Development",
          "slug": "rest-apis-development",
          "description": "Create REST APIs with Spring Boot, including versioning and documentation.",
          "difficulty": "Intermediate",
          "tags": ["REST", "Spring Boot", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What are the key principles of RESTful APIs?",
            "How do you version a REST API in Spring Boot?",
            "What is the role of Swagger in API documentation?"
          ]
        },
        {
          "id": "rest-apis-advanced",
          "title": "Advanced REST Concepts",
          "slug": "rest-apis-advanced",
          "description": "Implement HATEOAS, pagination, and rate limiting in REST APIs.",
          "difficulty": "Advanced",
          "tags": ["REST", "HATEOAS", "Java", "Advanced"],
          "related_questions": [
            "What is HATEOAS and how is it implemented in REST?",
            "How do you implement pagination in a REST API?",
            "What are some strategies for rate limiting in APIs?"
          ]
        },
        {
          "id": "rest-apis-testing",
          "title": "API Testing",
          "slug": "rest-apis-testing",
          "description": "Test REST APIs using tools like Postman, RestAssured, and Swagger.",
          "difficulty": "Intermediate",
          "tags": ["API Testing", "REST", "Java", "Intermediate"],
          "related_questions": [
            "How do you test a REST API using Postman?",
            "What is RestAssured and how is it used for API testing?",
            "How do you automate API tests in a Java project?"
          ]
        },
        {
          "id": "rest-apis-graphql",
          "title": "GraphQL",
          "slug": "rest-apis-graphql",
          "description": "Explore GraphQL as an alternative to REST for flexible API design.",
          "difficulty": "Advanced",
          "tags": ["GraphQL", "APIs", "Java", "Advanced"],
          "related_questions": [
            "What are the advantages of GraphQL over REST?",
            "How do you implement a GraphQL server in Java?",
            "What is a GraphQL schema and how is it defined?"
          ]
        }
      ]
    },
    {
      "id": "ci-cd",
      "title": "CI/CD",
      "slug": "ci-cd",
      "description": "Automate software delivery with continuous integration and deployment pipelines.",
      "difficulty": "Intermediate",
      "tags": ["CI/CD", "Java", "DevOps", "Interview"],
      "subtopics": [
        {
          "id": "ci-cd-jenkins",
          "title": "Jenkins",
          "slug": "ci-cd-jenkins",
          "description": "Set up CI/CD pipelines with Jenkins for Java projects.",
          "difficulty": "Intermediate",
          "tags": ["Jenkins", "CI/CD", "Java", "Intermediate"],
          "related_questions": [
            "What is a Jenkins pipeline and how is it defined?",
            "How do you configure a Maven build in Jenkins?",
            "What are some common plugins used in Jenkins for Java projects?"
          ]
        },
        {
          "id": "ci-cd-github-actions",
          "title": "GitHub Actions",
          "slug": "ci-cd-github-actions",
          "description": "Automate workflows with GitHub Actions for building and deploying Java apps.",
          "difficulty": "Intermediate",
          "tags": ["GitHub Actions", "CI/CD", "Java", "Intermediate"],
          "related_questions": [
            "What is a GitHub Actions workflow?",
            "How do you set up a Java build in GitHub Actions?",
            "What are the advantages of GitHub Actions for CI/CD?"
          ]
        },
        {
          "id": "ci-cd-gitlab",
          "title": "GitLab CI/CD",
          "slug": "ci-cd-gitlab",
          "description": "Use GitLab pipelines for continuous integration and deployment.",
          "difficulty": "Intermediate",
          "tags": ["GitLab", "CI/CD", "Java", "Intermediate"],
          "related_questions": [
            "What is the .gitlab-ci.yml file used for?",
            "How do you configure a pipeline in GitLab CI/CD?",
            "What are runners in GitLab CI/CD?"
          ]
        },
        {
          "id": "ci-cd-circleci",
          "title": "CircleCI",
          "slug": "ci-cd-circleci",
          "description": "Configure CircleCI for automated Java builds and deployments.",
          "difficulty": "Intermediate",
          "tags": ["CircleCI", "CI/CD", "Java", "Intermediate"],
          "related_questions": [
            "What is the structure of a CircleCI configuration file?",
            "How do you set up a Java build in CircleCI?",
            "What are orbs in CircleCI?"
          ]
        }
      ]
    },
    {
      "id": "containerization",
      "title": "Containerization",
      "slug": "containerization",
      "description": "Deploy Java applications in containers for portability and scalability.",
      "difficulty": "Advanced",
      "tags": ["Docker", "Kubernetes", "Java", "Interview"],
      "subtopics": [
        {
          "id": "containerization-docker",
          "title": "Docker",
          "slug": "containerization-docker",
          "description": "Containerize Java applications with Docker for consistent environments.",
          "difficulty": "Intermediate",
          "tags": ["Docker", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is Docker and how does it work with Java applications?",
            "How do you write a Dockerfile for a Java application?",
            "What is the difference between a Docker image and a container?"
          ]
        },
        {
          "id": "containerization-kubernetes",
          "title": "Kubernetes",
          "slug": "containerization-kubernetes",
          "description": "Orchestrate containers with Kubernetes for scalability and resilience.",
          "difficulty": "Advanced",
          "tags": ["Kubernetes", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What are the main components of Kubernetes?",
            "How do you deploy a Java application to Kubernetes?",
            "What is a Kubernetes pod and how does it work?"
          ]
        },
        {
          "id": "containerization-podman",
          "title": "Podman",
          "slug": "containerization-podman",
          "description": "Use Podman as a Docker alternative for container management.",
          "difficulty": "Intermediate",
          "tags": ["Podman", "Java", "Intermediate"],
          "related_questions": [
            "What is Podman and how does it differ from Docker?",
            "How do you run a Java application in Podman?",
            "What are the advantages of using Podman?"
          ]
        }
      ]
    },
    {
      "id": "monitoring",
      "title": "Monitoring Tools",
      "slug": "monitoring",
      "description": "Monitor and analyze Java application performance in production.",
      "difficulty": "Advanced",
      "tags": ["Monitoring", "Java", "Ops", "Interview"],
      "subtopics": [
        {
          "id": "monitoring-grafana",
          "title": "Grafana",
          "slug": "monitoring-grafana",
          "description": "Visualize metrics with Grafana dashboards for Java applications.",
          "difficulty": "Advanced",
          "tags": ["Grafana", "Monitoring", "Java", "Advanced"],
          "related_questions": [
            "What is Grafana and how is it used for monitoring?",
            "How do you integrate Grafana with a Java application?",
            "What are the key features of Grafana dashboards?"
          ]
        },
        {
          "id": "monitoring-elk",
          "title": "ELK Stack",
          "slug": "monitoring-elk",
          "description": "Analyze logs with Elasticsearch, Logstash, and Kibana for Java apps.",
          "difficulty": "Advanced",
          "tags": ["ELK", "Monitoring", "Java", "Advanced"],
          "related_questions": [
            "What is the ELK Stack and its components?",
            "How do you configure Logstash for Java application logs?",
            "What is the role of Kibana in the ELK Stack?"
          ]
        },
        {
          "id": "monitoring-prometheus",
          "title": "Prometheus",
          "slug": "monitoring-prometheus",
          "description": "Monitor Java applications with Prometheus for metrics collection.",
          "difficulty": "Advanced",
          "tags": ["Prometheus", "Monitoring", "Java", "Advanced"],
          "related_questions": [
            "What is Prometheus and how does it work?",
            "How do you expose metrics from a Java application to Prometheus?",
            "What are Prometheus exporters?"
          ]
        },
        {
          "id": "monitoring-apm",
          "title": "Application Performance Monitoring (APM)",
          "slug": "monitoring-apm",
          "description": "Use tools like New Relic or Dynatrace for deep application insights.",
          "difficulty": "Advanced",
          "tags": ["APM", "Monitoring", "Java", "Advanced"],
          "related_questions": [
            "What is APM and why is it important for Java applications?",
            "How does New Relic monitor Java application performance?",
            "What are the key metrics tracked by APM tools?"
          ]
        }
      ]
    },
    {
      "id": "cloud",
      "title": "Cloud",
      "slug": "cloud",
      "description": "Deploy and manage Java applications in cloud environments.",
      "difficulty": "Advanced",
      "tags": ["Cloud", "AWS", "Azure", "Java", "Interview"],
      "subtopics": [
        {
          "id": "cloud-aws",
          "title": "AWS",
          "slug": "cloud-aws",
          "description": "Use AWS services like EC2, S3, Lambda, and ECS for Java applications.",
          "difficulty": "Advanced",
          "tags": ["AWS", "Cloud", "Java", "Advanced", "Interview"],
          "related_questions": [
            "How do you deploy a Java application to AWS EC2?",
            "What is the role of S3 in AWS for Java applications?",
            "How does AWS Lambda support Java-based serverless applications?"
          ]
        },
        {
          "id": "cloud-azure",
          "title": "Azure",
          "slug": "cloud-azure",
          "description": "Leverage Azure for cloud-native Java applications and services.",
          "difficulty": "Advanced",
          "tags": ["Azure", "Cloud", "Java", "Advanced"],
          "related_questions": [
            "How do you deploy a Java application to Azure App Service?",
            "What are Azure Functions and how do they work with Java?",
            "What is the role of Azure Blob Storage in Java applications?"
          ]
        },
        {
          "id": "cloud-gcp",
          "title": "Google Cloud Platform (GCP)",
          "slug": "cloud-gcp",
          "description": "Deploy Java apps on GCP using App Engine, Cloud Functions, and Kubernetes Engine.",
          "difficulty": "Advanced",
          "tags": ["GCP", "Cloud", "Java", "Advanced"],
          "related_questions": [
            "How do you deploy a Java application to GCP App Engine?",
            "What is the role of Cloud Functions in GCP for Java?",
            "How does Google Kubernetes Engine (GKE) work with Java apps?"
          ]
        },
        {
          "id": "cloud-serverless",
          "title": "Serverless Computing",
          "slug": "cloud-serverless",
          "description": "Build serverless Java applications using AWS Lambda or Azure Functions.",
          "difficulty": "Advanced",
          "tags": ["Serverless", "Cloud", "Java", "Advanced"],
          "related_questions": [
            "What is serverless computing and its benefits?",
            "How do you write a Java function for AWS Lambda?",
            "What are the challenges of serverless Java applications?"
          ]
        }
      ]
    },
    {
      "id": "microservices",
      "title": "Spring Boot Microservices",
      "slug": "microservices",
      "description": "Build scalable and modular microservices with Spring Boot.",
      "difficulty": "Advanced",
      "tags": ["Microservices", "Spring Boot", "Java", "Interview"],
      "subtopics": [
        {
          "id": "microservices-architecture",
          "title": "Microservices Architecture",
          "slug": "microservices-architecture",
          "description": "Design and implement microservices with Spring Boot and best practices.",
          "difficulty": "Advanced",
          "tags": ["Microservices", "Spring Boot", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What are the key characteristics of a microservices architecture?",
            "How do you design a microservice with Spring Boot?",
            "What are the challenges of microservices compared to monolithic architecture?"
          ]
        },
        {
          "id": "microservices-patterns",
          "title": "Microservices Patterns",
          "slug": "microservices-patterns",
          "description": "Apply patterns like Circuit Breaker, Service Discovery, and API Gateway.",
          "difficulty": "Advanced",
          "tags": ["Microservices", "Patterns", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What is the Circuit Breaker pattern and how is it implemented?",
            "How does Service Discovery work in microservices?",
            "What is the role of an API Gateway in microservices?"
          ]
        },
        {
          "id": "microservices-testing",
          "title": "Microservices Testing",
          "slug": "microservices-testing",
          "description": "Test microservices using contract testing and integration testing.",
          "difficulty": "Advanced",
          "tags": ["Microservices", "Testing", "Java", "Advanced"],
          "related_questions": [
            "What is contract testing in microservices?",
            "How do you perform integration testing for microservices?",
            "What tools are commonly used for microservices testing?"
          ]
        },
        {
          "id": "microservices-deployment",
          "title": "Microservices Deployment",
          "slug": "microservices-deployment",
          "description": "Deploy microservices using Docker, Kubernetes, and CI/CD pipelines.",
          "difficulty": "Advanced",
          "tags": ["Microservices", "Deployment", "Java", "Advanced"],
          "related_questions": [
            "How do you deploy microservices using Docker?",
            "What is the role of Kubernetes in microservices deployment?",
            "How do CI/CD pipelines support microservices?"
          ]
        }
      ]
    },
    {
      "id": "messaging",
      "title": "Messaging Systems",
      "slug": "messaging",
      "description": "Enable asynchronous communication in Java applications.",
      "difficulty": "Advanced",
      "tags": ["Messaging", "Kafka", "RabbitMQ", "Java", "Interview"],
      "subtopics": [
        {
          "id": "messaging-kafka",
          "title": "Apache Kafka",
          "slug": "messaging-kafka",
          "description": "Use Kafka for high-throughput messaging and event streaming.",
          "difficulty": "Advanced",
          "tags": ["Kafka", "Messaging", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What is Apache Kafka and its key components?",
            "How do you produce and consume messages in Kafka using Java?",
            "What is the role of partitions in Kafka?"
          ]
        },
        {
          "id": "messaging-rabbitmq",
          "title": "RabbitMQ",
          "slug": "messaging-rabbitmq",
          "description": "Implement message queues with RabbitMQ for reliable communication.",
          "difficulty": "Advanced",
          "tags": ["RabbitMQ", "Messaging", "Java", "Advanced"],
          "related_questions": [
            "What is RabbitMQ and how does it work?",
            "How do you configure a queue in RabbitMQ with Java?",
            "What is the difference between an exchange and a queue in RabbitMQ?"
          ]
        },
        {
          "id": "messaging-activemq",
          "title": "ActiveMQ",
          "slug": "messaging-activemq",
          "description": "Use ActiveMQ for JMS-based messaging in Java applications.",
          "difficulty": "Advanced",
          "tags": ["ActiveMQ", "Messaging", "Java", "Advanced"],
          "related_questions": [
            "What is ActiveMQ and its use cases?",
            "How do you send a message using JMS in ActiveMQ?",
            "What are the differences between ActiveMQ and RabbitMQ?"
          ]
        },
        {
          "id": "messaging-jms",
          "title": "Java Message Service (JMS)",
          "slug": "messaging-jms",
          "description": "Implement messaging using JMS with providers like ActiveMQ or IBM MQ.",
          "difficulty": "Advanced",
          "tags": ["JMS", "Messaging", "Java", "Advanced"],
          "related_questions": [
            "What is JMS and how does it work in Java?",
            "What is the difference between a queue and a topic in JMS?",
            "How do you configure a JMS connection factory?"
          ]
        }
      ]
    },
    {
      "id": "caching",
      "title": "Caching",
      "slug": "caching",
      "description": "Improve Java application performance with caching strategies.",
      "difficulty": "Intermediate",
      "tags": ["Caching", "Redis", "Java", "Interview"],
      "subtopics": [
        {
          "id": "caching-redis",
          "title": "Redis",
          "slug": "caching-redis",
          "description": "Use Redis for fast, in-memory caching in Java applications.",
          "difficulty": "Intermediate",
          "tags": ["Redis", "Caching", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is Redis and how is it used for caching?",
            "How do you connect to Redis from a Java application?",
            "What are the key data structures in Redis?"
          ]
        },
        {
          "id": "caching-inmemory",
          "title": "In-Memory Caching",
          "slug": "caching-inmemory",
          "description": "Implement caching with Ehcache or Caffeine for low-latency access.",
          "difficulty": "Intermediate",
          "tags": ["Ehcache", "Caffeine", "Caching", "Java", "Intermediate"],
          "related_questions": [
            "What is Ehcache and how does it work?",
            "How do you configure a cache in Caffeine?",
            "What are the advantages of Caffeine over Ehcache?"
          ]
        },
        {
          "id": "caching-distributed",
          "title": "Distributed Caching",
          "slug": "caching-distributed",
          "description": "Use distributed caching solutions like Hazelcast for scalability.",
          "difficulty": "Advanced",
          "tags": ["Hazelcast", "Caching", "Java", "Advanced"],
          "related_questions": [
            "What is distributed caching and its benefits?",
            "How do you implement a Hazelcast cache in Java?",
            "What are the challenges of distributed caching?"
          ]
        }
      ]
    },
    {
      "id": "system-design",
      "title": "System Design",
      "slug": "system-design",
      "description": "Design scalable and reliable systems for Java-based applications.",
      "difficulty": "Advanced",
      "tags": ["System Design", "Java", "Architecture", "Interview"],
      "subtopics": [
        {
          "id": "system-design-principles",
          "title": "System Design Principles",
          "slug": "system-design-principles",
          "description": "Learn to design systems like URL shorteners, messaging apps, or e-commerce platforms.",
          "difficulty": "Advanced",
          "tags": ["System Design", "Java", "Advanced", "Interview"],
          "related_questions": [
            "How would you design a URL shortening service?",
            "What are the key considerations for designing a messaging app?",
            "How do you ensure high availability in system design?"
          ]
        },
        {
          "id": "system-design-scalability",
          "title": "Scalability Patterns",
          "slug": "system-design-scalability",
          "description": "Apply load balancing, sharding, and replication for scalability.",
          "difficulty": "Advanced",
          "tags": ["Scalability", "System Design", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What is load balancing and how does it work?",
            "How do you implement database sharding?",
            "What is the difference between horizontal and vertical scaling?"
          ]
        },
        {
          "id": "system-design-caching",
          "title": "Caching Strategies",
          "slug": "system-design-caching",
          "description": "Implement caching at various layers for performance optimization.",
          "difficulty": "Advanced",
          "tags": ["Caching", "System Design", "Java", "Advanced"],
          "related_questions": [
            "What are the different caching strategies in system design?",
            "How does a Content Delivery Network (CDN) work?",
            "What is cache eviction and its policies?"
          ]
        },
        {
          "id": "system-design-databases",
          "title": "Database Design",
          "slug": "system-design-databases",
          "description": "Choose and design databases for scalability and performance.",
          "difficulty": "Advanced",
          "tags": ["Databases", "System Design", "Java", "Advanced"],
          "related_questions": [
            "How do you choose between SQL and NoSQL for a system?",
            "What is database partitioning and how is it implemented?",
            "How do you design a database schema for high performance?"
          ]
        },
        {
          "id": "system-design-messaging",
          "title": "Messaging Systems Design",
          "slug": "system-design-messaging",
          "description": "Design asynchronous systems using Kafka or RabbitMQ.",
          "difficulty": "Advanced",
          "tags": ["Messaging", "System Design", "Java", "Advanced"],
          "related_questions": [
            "How would you design a messaging system using Kafka?",
            "What are the considerations for ensuring message delivery?",
            "How do you handle message retries in a messaging system?"
          ]
        }
      ]
    },
    {
      "id": "dsa",
      "title": "Data Structures & Algorithms",
      "slug": "data-structures-algorithms",
      "description": "Master coding interview essentials with data structures and algorithms in Java.",
      "difficulty": "Beginner",
      "tags": ["DSA", "Java", "Algorithms", "Interview"],
      "subtopics": [
        {
          "id": "dsa-arrays",
          "title": "Arrays and Strings",
          "slug": "dsa-arrays",
          "description": "Solve problems using arrays and string manipulation techniques.",
          "difficulty": "Beginner",
          "tags": ["Arrays", "Strings", "Java", "Beginner", "Interview"],
          "related_questions": [
            "How do you find the two-sum problem in an array?",
            "What is the best way to reverse a string in Java?",
            "How do you check if a string is a palindrome?"
          ]
        },
        {
          "id": "dsa-linkedlists",
          "title": "Linked Lists",
          "slug": "dsa-linkedlists",
          "description": "Implement and manipulate singly and doubly linked lists.",
          "difficulty": "Beginner",
          "tags": ["Linked Lists", "Java", "Beginner", "Interview"],
          "related_questions": [
            "How do you reverse a singly linked list?",
            "How do you detect a cycle in a linked list?",
            "What is the difference between a singly and doubly linked list?"
          ]
        },
        {
          "id": "dsa-stacks-queues",
          "title": "Stacks and Queues",
          "slug": "dsa-stacks-queues",
          "description": "Use stacks and queues for problems like expression evaluation and task scheduling.",
          "difficulty": "Beginner",
          "tags": ["Stacks", "Queues", "Java", "Beginner", "Interview"],
          "related_questions": [
            "How do you implement a stack using an array?",
            "What is a deque and how is it used?",
            "How do you evaluate a postfix expression using a stack?"
          ]
        },
        {
          "id": "dsa-trees",
          "title": "Trees",
          "slug": "dsa-trees",
          "description": "Implement binary trees, BSTs, and tree traversal algorithms.",
          "difficulty": "Intermediate",
          "tags": ["Trees", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What are the different tree traversal methods?",
            "How do you implement a binary search tree in Java?",
            "How do you find the lowest common ancestor in a binary tree?"
          ]
        },
        {
          "id": "dsa-graphs",
          "title": "Graphs",
          "slug": "dsa-graphs",
          "description": "Solve graph problems using DFS, BFS, and shortest path algorithms.",
          "difficulty": "Intermediate",
          "tags": ["Graphs", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is the difference between DFS and BFS?",
            "How do you implement Dijkstra’s algorithm in Java?",
            "What is a topological sort and how is it used?"
          ]
        },
        {
          "id": "dsa-hashing",
          "title": "Hashing",
          "slug": "dsa-hashing",
          "description": "Use hash tables and hash maps for efficient data retrieval.",
          "difficulty": "Intermediate",
          "tags": ["Hashing", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "How does a hash table handle collisions?",
            "What is the time complexity of operations in a HashMap?",
            "How do you implement a custom hash function in Java?"
          ]
        },
        {
          "id": "dsa-sorting",
          "title": "Sorting Algorithms",
          "slug": "dsa-sorting",
          "description": "Implement and analyze sorting algorithms like QuickSort, MergeSort, and HeapSort.",
          "difficulty": "Intermediate",
          "tags": ["Sorting", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is the difference between QuickSort and MergeSort?",
            "How does HeapSort work?",
            "What is the time complexity of Bubble Sort?"
          ]
        },
        {
          "id": "dsa-searching",
          "title": "Searching Algorithms",
          "slug": "dsa-searching",
          "description": "Use binary search and other techniques for efficient searching.",
          "difficulty": "Beginner",
          "tags": ["Searching", "Java", "Beginner", "Interview"],
          "related_questions": [
            "How does binary search work and what is its time complexity?",
            "What is exponential search and when is it used?",
            "How do you implement a linear search in Java?"
          ]
        },
        {
          "id": "dsa-dynamic-programming",
          "title": "Dynamic Programming",
          "slug": "dsa-dynamic-programming",
          "description": "Solve complex problems using memoization and tabulation.",
          "difficulty": "Advanced",
          "tags": ["Dynamic Programming", "Java", "Advanced", "Interview"],
          "related_questions": [
            "What is the difference between memoization and tabulation?",
            "How do you solve the knapsack problem using dynamic programming?",
            "What is the longest common subsequence problem?"
          ]
        },
        {
          "id": "dsa-greedy",
          "title": "Greedy Algorithms",
          "slug": "dsa-greedy",
          "description": "Apply greedy techniques for optimization problems.",
          "difficulty": "Intermediate",
          "tags": ["Greedy", "Java", "Intermediate", "Interview"],
          "related_questions": [
            "What is a greedy algorithm and when is it used?",
            "How do you solve the activity selection problem?",
            "What is the Huffman coding algorithm?"
          ]
        }
      ]
    },
    {
      "id": "interview-coding",
      "title": "Java Coding Interview Questions",
      "slug": "interview-coding",
      "description": "Prepare for Java-specific coding questions commonly asked in interviews.",
      "difficulty": "Intermediate",
      "tags": ["Coding", "Java", "Interview"],
      "subtopics": [
        {
          "id": "interview-coding-strings",
          "title": "String Problems",
          "slug": "interview-coding-strings",
          "description": "Solve common string manipulation problems like palindrome and anagram checks.",
          "difficulty": "Beginner",
          "tags": ["Strings", "Java", "Interview", "Beginner"],
          "related_questions": [
            "How do you check if a string is an anagram of another string?",
            "How do you find the longest palindromic substring?",
            "How do you reverse words in a string?"
          ]
        },
        {
          "id": "interview-coding-arrays",
          "title": "Array Problems",
          "slug": "interview-coding-arrays",
          "description": "Tackle array-based problems like two-sum and maximum subarray.",
          "difficulty": "Beginner",
          "tags": ["Arrays", "Java", "Interview", "Beginner"],
          "related_questions": [
            "How do you solve the two-sum problem in an array?",
            "What is Kadane’s algorithm for maximum subarray sum?",
            "How do you rotate an array by k positions?"
          ]
        },
        {
          "id": "interview-coding-collections",
          "title": "Collections Problems",
          "slug": "interview-coding-collections",
          "description": "Solve problems using Java collections like HashMap and PriorityQueue.",
          "difficulty": "Intermediate",
          "tags": ["Collections", "Java", "Interview", "Intermediate"],
          "related_questions": [
            "How do you find the top k frequent elements using a HashMap?",
            "How do you implement a LRU cache using collections?",
            "What is the role of PriorityQueue in solving problems?"
          ]
        },
        {
          "id": "interview-coding-oop",
          "title": "OOP Design Problems",
          "slug": "interview-coding-oop",
          "description": "Design systems using OOP principles, like a parking lot or library system.",
          "difficulty": "Intermediate",
          "tags": ["OOP", "Java", "Interview", "Intermediate"],
          "related_questions": [
            "How would you design a parking lot system using OOP?",
            "What classes would you create for a library management system?",
            "How do you apply SOLID principles in OOP design?"
          ]
        },
        {
          "id": "interview-coding-multithreading",
          "title": "Multithreading Problems",
          "slug": "interview-coding-multithreading",
          "description": "Solve concurrency problems like producer-consumer or dining philosophers.",
          "difficulty": "Advanced",
          "tags": ["Multithreading", "Java", "Interview", "Advanced"],
          "related_questions": [
            "How do you implement the producer-consumer problem in Java?",
            "What is the dining philosophers problem and its solution?",
            "How do you avoid deadlock in a multithreaded application?"
          ]
        }
      ]
    },
    {
      "id": "agile",
      "title": "Agile Methodologies",
      "slug": "agile-methodologies",
      "description": "Work effectively in agile development teams using modern methodologies.",
      "difficulty": "Beginner",
      "tags": ["Agile", "Java", "Teamwork", "Interview"],
      "subtopics": [
        {
          "id": "agile-scrum",
          "title": "Scrum",
          "slug": "agile-scrum",
          "description": "Understand Scrum roles, ceremonies, and artifacts for Java projects.",
          "difficulty": "Beginner",
          "tags": ["Scrum", "Agile", "Java", "Beginner", "Interview"],
          "related_questions": [
            "What are the key roles in a Scrum team?",
            "What is the purpose of a sprint retrospective?",
            "How do you estimate tasks in Scrum?"
          ]
        },
        {
          "id": "agile-kanban",
          "title": "Kanban",
          "slug": "agile-kanban",
          "description": "Use Kanban boards for workflow visualization and continuous delivery.",
          "difficulty": "Beginner",
          "tags": ["Kanban", "Agile", "Java", "Beginner"],
          "related_questions": [
            "What is a Kanban board and how is it used?",
            "How do you limit work in progress (WIP) in Kanban?",
            "What are the benefits of Kanban for Java projects?"
          ]
        },
        {
          "id": "agile-xp",
          "title": "Extreme Programming (XP)",
          "slug": "agile-xp",
          "description": "Apply XP practices like pair programming and TDD in Java development.",
          "difficulty": "Intermediate",
          "tags": ["XP", "Agile", "Java", "Intermediate"],
          "related_questions": [
            "What is pair programming and its benefits?",
            "How does Test-Driven Development (TDD) work in XP?",
            "What are the core values of Extreme Programming?"
          ]
        }
      ]
    },
    {
      "id": "behavioral",
      "title": "Behavioral Interview Questions",
      "slug": "behavioral-questions",
      "description": "Prepare for non-technical interview questions to showcase soft skills.",
      "difficulty": "Beginner",
      "tags": ["Behavioral", "Interview", "Java"],
      "subtopics": [
        {
          "id": "behavioral-leadership",
          "title": "Leadership and Teamwork",
          "slug": "behavioral-leadership",
          "description": "Answer questions about leading teams and collaborating effectively.",
          "difficulty": "Beginner",
          "tags": ["Behavioral", "Interview", "Java", "Beginner"],
          "related_questions": [
            "Can you describe a time you led a team to success?",
            "How do you handle disagreements within a team?",
            "What strategies do you use to motivate team members?"
          ]
        },
        {
          "id": "behavioral-conflict",
          "title": "Conflict Resolution",
          "slug": "behavioral-conflict",
          "description": "Handle questions about resolving disagreements and challenges.",
          "difficulty": "Beginner",
          "tags": ["Behavioral", "Interview", "Java", "Beginner"],
          "related_questions": [
            "Describe a situation where you resolved a conflict with a colleague.",
            "How do you approach difficult conversations?",
            "What steps do you take to mediate a dispute?"
          ]
        },
        {
          "id": "behavioral-failure",
          "title": "Handling Failure",
          "slug": "behavioral-failure",
          "description": "Discuss past failures and lessons learned in a professional context.",
          "difficulty": "Beginner",
          "tags": ["Behavioral", "Interview", "Java", "Beginner"],
          "related_questions": [
            "Can you share a time when a project failed and what you learned?",
            "How do you recover from setbacks in a project?",
            "What do you do when you make a mistake at work?"
          ]
        },
        {
          "id": "behavioral-career",
          "title": "Career Motivation",
          "slug": "behavioral-career",
          "description": "Explain your career goals and passion for Java development.",
          "difficulty": "Beginner",
          "tags": ["Behavioral", "Interview", "Java", "Beginner"],
          "related_questions": [
            "Why did you choose a career in Java development?",
            "What are your long-term career goals?",
            "What excites you about working on Java projects?"
          ]
        }
      ]
    },
    {
      "id": "java-interview-tips",
      "title": "Java Interview Preparation",
      "slug": "java-interview-tips",
      "description": "Strategies and tips for excelling in Java technical interviews.",
      "difficulty": "Beginner",
      "tags": ["Interview", "Java", "Preparation"],
      "subtopics": [
        {
          "id": "interview-tips-resume",
          "title": "Resume Building",
          "slug": "interview-tips-resume",
          "description": "Craft a Java-focused resume highlighting projects and skills.",
          "difficulty": "Beginner",
          "tags": ["Resume", "Interview", "Java", "Beginner"],
          "related_questions": [
            "What key elements should be included in a Java developer resume?",
            "How do you highlight Java projects on a resume?",
            "What are some common mistakes to avoid in a resume?"
          ]
        },
        {
          "id": "interview-tips-coding",
          "title": "Coding Interview Strategies",
          "slug": "interview-tips-coding",
          "description": "Approach coding interviews with problem-solving and communication skills.",
          "difficulty": "Beginner",
          "tags": ["Coding", "Interview", "Java", "Beginner"],
          "related_questions": [
            "How do you approach a coding problem in an interview?",
            "What is the importance of explaining your thought process?",
            "How do you handle a problem you don’t know how to solve?"
          ]
        },
        {
          "id": "interview-tips-system-design",
          "title": "System Design Interview",
          "slug": "interview-tips-system-design",
          "description": "Prepare for system design interviews with a focus on Java-based systems.",
          "difficulty": "Advanced",
          "tags": ["System Design", "Interview", "Java", "Advanced"],
          "related_questions": [
            "What are the key steps in a system design interview?",
            "How do you approach designing a scalable Java system?",
            "What are common pitfalls in system design interviews?"
          ]
        },
        {
          "id": "interview-tips-mock",
          "title": "Mock Interviews",
          "slug": "interview-tips-mock",
          "description": "Practice mock interviews to simulate real Java interview scenarios.",
          "difficulty": "Beginner",
          "tags": ["Mock Interview", "Interview", "Java", "Beginner"],
          "related_questions": [
            "How do mock interviews help in preparation?",
            "What are some good platforms for practicing mock interviews?",
            "How do you get feedback from a mock interview?"
          ]
        }
      ]
    }
  ]
}